Property 2
descartes -p=2 -m=0: 
Sat: VIOLATES [Transitivity] (compare): for all x, y and z, compare(x, y) > 0 and compare/equals(y, z) > 0 implies compare/equals(x, z) > 0.
tripleCount231 -> 0
res1!10 -> 1
o23!9 -> PokerHand!val!1
o11!4 -> PokerHand!val!0
o22!7 -> PokerHand!val!1
i221 -> 0
o21!5 -> PokerHand!val!2
higherTriple11 -> 3
tripleCount131 -> 0
tripleCount221 -> 0
tripleCount211 -> 2
tripleCount111 -> 0
res3!12 -> 0
tripleCount121 -> 2
i221!6325 -> 0
res2!11 -> 1
o13!8 -> PokerHand!val!0
i211!6326 -> 0
i211 -> 6
higherTriple21 -> 3
o12!6 -> PokerHand!val!2
lastIndexOf!0 -> {
  3
}
equals!19 -> {
  15
}
compareDouble!16 -> {
  0
}
countOccurrencesOf!1 -> {
  PokerHand!val!2 3 -> 2
  else -> 0
}
charAt!2!6452 -> {
  PokerHand!val!0 6 -> 7
  PokerHand!val!2 0 -> 8
  PokerHand!val!0 5 -> 15
  PokerHand!val!2 5 -> 16
  PokerHand!val!0 4 -> 18
  PokerHand!val!2 4 -> 19
  PokerHand!val!0 0 -> 21
  PokerHand!val!0 2 -> 22
  PokerHand!val!2 2 -> 23
  else -> 2
}
compareInt!17 -> {
  0
}
indexOf!3 -> {
  (- 1)
}
k!6451 -> {
  (let ((a!1 (ite (>= (:var 0) 4)
                  (ite (>= (:var 0) 5) (ite (>= (:var 0) 6) 6 5) 4)
                  2)))
    (ite (>= (:var 0) 0) (ite (>= (:var 0) 2) a!1 0) (- 1)))
}
compareIgnoreCaseString!18 -> {
  0
}
charAt!2 -> {
  (charAt!2!6452 (:var 0) (k!6451 (:var 1)))
}


real	0m0.704s
user	0m0.694s
sys	0m0.008s
descartes -p=2 -m=1: 
Sat: VIOLATES [Transitivity] (compare): for all x, y and z, compare(x, y) > 0 and compare/equals(y, z) > 0 implies compare/equals(x, z) > 0.
tripleCount231 -> 0
res1!10 -> 1
o23!9 -> PokerHand!val!1
o11!4 -> PokerHand!val!0
o22!7 -> PokerHand!val!1
i221!21603 -> 0
i221 -> 0
o21!5 -> PokerHand!val!2
higherTriple11 -> (- 2)
tripleCount131 -> 0
tripleCount221 -> 0
tripleCount211 -> 1
tripleCount111 -> 0
res3!12 -> 0
tripleCount121 -> 1
res2!11 -> 1
o13!8 -> PokerHand!val!0
i211!21604 -> 0
i211 -> 4
higherTriple21 -> (- 2)
o12!6 -> PokerHand!val!2
lastIndexOf!0 -> {
  (- 2)
}
charAt!2!21690 -> {
  PokerHand!val!0 4 -> 6
  PokerHand!val!2 0 -> 8
  PokerHand!val!0 3 -> 14
  PokerHand!val!2 3 -> 15
  PokerHand!val!0 0 -> 17
  else -> 2
}
equals!19 -> {
  5
}
compareDouble!16 -> {
  0
}
countOccurrencesOf!1 -> {
  PokerHand!val!2 3 -> 1
  else -> 0
}
compareInt!17 -> {
  0
}
indexOf!3 -> {
  PokerHand!val!2 2 -> 7
  else -> (- 1)
}
k!21689 -> {
  (let ((a!1 (ite (>= (:var 0) 0)
                  (ite (>= (:var 0) 3) (ite (>= (:var 0) 4) 4 3) 0)
                  (- 1))))
    (ite (>= (:var 0) (- 1)) a!1 (- 3)))
}
compareIgnoreCaseString!18 -> {
  0
}
charAt!2 -> {
  (charAt!2!21690 (:var 0) (k!21689 (:var 1)))
}


real	0m8.973s
user	0m8.961s
sys	0m0.012s
descartes -p=2 -m=2: 
descartes: buildArtCond: fn

real	0m0.029s
user	0m0.028s
sys	0m0.000s
descartes -p=2 -m=3: 
descartes: buildArtCond: fn

real	0m0.026s
user	0m0.022s
sys	0m0.004s
