/* ./apache-storm-44e9aaf/storm-core/src/jvm/backtype/storm/generated/ExecutorSummary.java */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package backtype.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-6")
public class ExecutorSummary implements org.apache.thrift.TBase<ExecutorSummary, ExecutorSummary._Fields>, java.io.Serializable, Cloneable, Comparable<ExecutorSummary> {
  
  private ExecutorInfo executor_info; // required
  private String component_id; // required
  private String host; // required
  private int port; // required
  private int uptime_secs; // required
  private ExecutorStats stats; // optional
  
  boolean is_set_executor_info();
  boolean is_set_component_id();
  boolean is_set_host();
  boolean is_set_stats();

  public boolean equals(ExecutorSummary o1, ExecutorSummary o2) {
    boolean this_present_executor_info = true && o1.is_set_executor_info();
    boolean that_present_executor_info = true && o2.is_set_executor_info();
    if (this_present_executor_info || that_present_executor_info) {
      if (!(this_present_executor_info && that_present_executor_info))
        return false;
      if (equals(o1.executor_info,o2.executor_info) == 0)
        return false;
    }

    boolean this_present_component_id = true && o1.is_set_component_id();
    boolean that_present_component_id = true && o2.is_set_component_id();
    if (this_present_component_id || that_present_component_id) {
      if (!(this_present_component_id && that_present_component_id))
        return false;
      if (equals(o1.component_id,o2.component_id) == 0)
        return false;
    }

    boolean this_present_host = true && o1.is_set_host();
    boolean that_present_host = true && o2.is_set_host();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (equals(o1.host,o2.host) == 0)
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (o1.port != o2.port)
        return false;
    }

    boolean this_present_uptime_secs = true;
    boolean that_present_uptime_secs = true;
    if (this_present_uptime_secs || that_present_uptime_secs) {
      if (!(this_present_uptime_secs && that_present_uptime_secs))
        return false;
      if (o1.uptime_secs != o2.uptime_secs)
        return false;
    }

    boolean this_present_stats = true && o1.is_set_stats();
    boolean that_present_stats = true && o2.is_set_stats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (equals(o1.stats,o2.stats) == 0)
        return false;
    }

    return true;
  }
}

