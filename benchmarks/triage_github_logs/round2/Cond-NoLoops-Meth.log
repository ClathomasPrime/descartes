XMLElementComparator.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "_descriptor",Ident "areEqual"])]}
WorkSource.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [I (Ident "compareTo")]}
WorkflowTaskUserIdComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowTask1",Ident "getAssigneeUserId"]),N (Name [Ident "workflowTask2",Ident "getAssigneeUserId"]),N (Name [Ident "assigneeUserId1",Ident "compareTo"]),N (Name [Ident "workflowTask1",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTask2",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTaskId1",Ident "compareTo"])]}
WorkflowTaskNameComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowTask1",Ident "getName"]),N (Name [Ident "workflowTask2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"]),N (Name [Ident "workflowTask1",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTask2",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTaskId1",Ident "compareTo"])]}
WorkflowTaskDueDateComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowTask1",Ident "getDueDate"]),N (Name [Ident "workflowTask2",Ident "getDueDate"]),N (Name [Ident "dueDate1",Ident "compareTo"]),N (Name [Ident "workflowTask1",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTask2",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTaskId1",Ident "compareTo"])]}
WorkflowTaskCreateDateComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowTask1",Ident "getCreateDate"]),N (Name [Ident "workflowTask2",Ident "getCreateDate"]),N (Name [Ident "createDate1",Ident "compareTo"]),N (Name [Ident "workflowTask1",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTask2",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTaskId1",Ident "compareTo"])]}
WorkflowTaskCompletionDateComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowTask1",Ident "getCompletionDate"]),N (Name [Ident "workflowTask2",Ident "getCompletionDate"]),N (Name [Ident "completionDate1",Ident "compareTo"]),N (Name [Ident "workflowTask1",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTask2",Ident "getWorkflowTaskId"]),N (Name [Ident "workflowTaskId1",Ident "compareTo"])]}
WorkflowLogUserIdComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowLog1",Ident "getUserId"]),N (Name [Ident "workflowLog2",Ident "getUserId"]),N (Name [Ident "userId1",Ident "compareTo"]),N (Name [Ident "workflowLog1",Ident "getWorkflowLogId"]),N (Name [Ident "workflowLog2",Ident "getWorkflowLogId"]),N (Name [Ident "workflowLogId1",Ident "compareTo"])]}
WorkflowLogCreateDateComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowLog1",Ident "getCreateDate"]),N (Name [Ident "workflowLog2",Ident "getCreateDate"]),N (Name [Ident "createDate1",Ident "compareTo"]),N (Name [Ident "workflowLog1",Ident "getWorkflowLogId"]),N (Name [Ident "workflowLog2",Ident "getWorkflowLogId"]),N (Name [Ident "workflowLogId1",Ident "compareTo"])]}
WorkflowInstanceStateComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowInstance1",Ident "getState"]),N (Name [Ident "workflowInstance2",Ident "getState"]),N (Name [Ident "state1",Ident "compareTo"]),N (Name [Ident "workflowInstance1",Ident "getWorkflowInstanceId"]),N (Name [Ident "workflowInstance2",Ident "getWorkflowInstanceId"]),N (Name [Ident "workflowInstanceId1",Ident "compareTo"])]}
WorkflowInstanceStartDateComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowInstance1",Ident "getStartDate"]),N (Name [Ident "workflowInstance2",Ident "getStartDate"]),N (Name [Ident "startDate1",Ident "compareTo"]),N (Name [Ident "workflowInstance1",Ident "getWorkflowInstanceId"]),N (Name [Ident "workflowInstance2",Ident "getWorkflowInstanceId"]),N (Name [Ident "workflowInstanceId1",Ident "compareTo"])]}
WorkflowInstanceLinkModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "workflowInstanceLink",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
WorkflowInstanceEndDateComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowInstance1",Ident "getEndDate"]),N (Name [Ident "workflowInstance2",Ident "getEndDate"]),N (Name [Ident "endDate1",Ident "compareTo"]),N (Name [Ident "workflowInstance1",Ident "getWorkflowInstanceId"]),N (Name [Ident "workflowInstance2",Ident "getWorkflowInstanceId"]),N (Name [Ident "workflowInstanceId1",Ident "compareTo"])]}
WorkflowDefinitionNameComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "workflowDefinition1",Ident "getName"]),N (Name [Ident "workflowDefinition2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"]),N (Name [Ident "workflowDefinition1",Ident "getVersion"]),N (Name [Ident "workflowDefinition2",Ident "getVersion"]),N (Name [Ident "version1",Ident "compareTo"])]}
WorkflowDefinitionLinkModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getWorkflowDefinitionName"]),N (Name [Ident "workflowDefinitionLink",Ident "getWorkflowDefinitionName"]),I (Ident "compareTo")]}
WikiPageResourceModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "wikiPageResource",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
WikiPageModelImpl.java: Statistics {nl = 20, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getNodeId"]),N (Name [Ident "wikiPage",Ident "getNodeId"]),N (Name [Ident "getNodeId"]),N (Name [Ident "wikiPage",Ident "getNodeId"]),N (Name [Ident "getTitle"]),N (Name [Ident "wikiPage",Ident "getTitle"]),I (Ident "compareToIgnoreCase"),N (Name [Ident "getVersion"]),N (Name [Ident "wikiPage",Ident "getVersion"]),N (Name [Ident "getVersion"]),N (Name [Ident "wikiPage",Ident "getVersion"])]}
WikiNodeModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "wikiNode",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
WeightedWord.java: Statistics {nl = 5, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getWeight"]),N (Name [Ident "weightedWord",Ident "getWeight"]),N (Name [Ident "getWeight"]),N (Name [Ident "weightedWord",Ident "getWeight"])]}
WebsiteModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "website",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
WebDAVPropsModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "webDAVProps",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
WallEntryModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "wallEntry",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
VirtualHostModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "virtualHost",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
View.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "that",Ident "ordinal"]),I (Ident "ordinal")]}
ValueAnalysis.java: Statistics {nl = 11, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "m1",Ident "getCls"]),I (Ident "isPrimitive"),N (Name [Ident "m2",Ident "getCls"]),I (Ident "isPrimitive"),N (Name [Ident "m1",Ident "getJavaName"]),N (Name [Ident "m2",Ident "getJavaName"]),I (Ident "compareTo")]}
Util.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [I (Ident "getName"),I (Ident "getName"),N (Name [Ident "n1",Ident "compareTo"])]}
UserTrackerPathModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "userTrackerPath",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
UserTrackerModifiedDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "userTracker1",Ident "getModifiedDate"]),N (Name [Ident "userTracker2",Ident "getModifiedDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
UserTrackerModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "userTracker",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
UserScreenNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "user1",Ident "getScreenName"]),N (Name [Ident "user2",Ident "getScreenName"]),N (Name [Ident "screenName1",Ident "compareTo"])]}
UserNotificationEventModelImpl.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getTimestamp"]),N (Name [Ident "userNotificationEvent",Ident "getTimestamp"]),N (Name [Ident "getTimestamp"]),N (Name [Ident "userNotificationEvent",Ident "getTimestamp"])]}
UserNotificationDeliveryModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "userNotificationDelivery",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
UserModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "user",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
UserLoginDateComparator.java: Statistics {nl = 16, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "user1",Ident "getLoginDate"]),N (Name [Ident "user2",Ident "getLoginDate"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "user1",Ident "getLastName"]),N (Name [Ident "user2",Ident "getLastName"]),N (Name [Ident "lastName1",Ident "compareTo"]),N (Name [Ident "user1",Ident "getFirstName"]),N (Name [Ident "user2",Ident "getFirstName"]),N (Name [Ident "firstName1",Ident "compareTo"]),N (Name [Ident "user1",Ident "getMiddleName"]),N (Name [Ident "user2",Ident "getMiddleName"]),N (Name [Ident "middleName1",Ident "compareTo"])]}
UserLastNameComparator.java: Statistics {nl = 14, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "user1",Ident "getLastName"]),N (Name [Ident "user2",Ident "getLastName"]),N (Name [Ident "lastName1",Ident "compareTo"]),N (Name [Ident "user1",Ident "getFirstName"]),N (Name [Ident "user2",Ident "getFirstName"]),N (Name [Ident "firstName1",Ident "compareTo"]),N (Name [Ident "user1",Ident "getMiddleName"]),N (Name [Ident "user2",Ident "getMiddleName"]),N (Name [Ident "middleName1",Ident "compareTo"])]}
UserJobTitleComparator.java: Statistics {nl = 18, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "user1",Ident "getJobTitle"]),N (Name [Ident "user2",Ident "getJobTitle"]),N (Name [Ident "jobTitle1",Ident "compareTo"]),N (Name [Ident "user1",Ident "getLastName"]),N (Name [Ident "user2",Ident "getLastName"]),N (Name [Ident "lastName1",Ident "compareTo"]),N (Name [Ident "user1",Ident "getFirstName"]),N (Name [Ident "user2",Ident "getFirstName"]),N (Name [Ident "firstName1",Ident "compareTo"]),N (Name [Ident "user1",Ident "getMiddleName"]),N (Name [Ident "user2",Ident "getMiddleName"]),N (Name [Ident "middleName1",Ident "compareTo"])]}
UserIdMapperModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "userIdMapper",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
UserGroupNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "userGroup1",Ident "getName"]),N (Name [Ident "userGroup2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
UserGroupModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "userGroup",Ident "getName"]),I (Ident "compareTo")]}
UserGroupDescriptionComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "userGroup1",Ident "getDescription"]),N (Name [Ident "userGroup2",Ident "getDescription"]),N (Name [Ident "description1",Ident "compareTo"]),N (Name [Ident "userGroup1",Ident "getName"]),N (Name [Ident "userGroup2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
UserFirstNameComparator.java: Statistics {nl = 14, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "user1",Ident "getFirstName"]),N (Name [Ident "user2",Ident "getFirstName"]),N (Name [Ident "firstName1",Ident "compareTo"]),N (Name [Ident "user1",Ident "getMiddleName"]),N (Name [Ident "user2",Ident "getMiddleName"]),N (Name [Ident "middleName1",Ident "compareTo"]),N (Name [Ident "user1",Ident "getLastName"]),N (Name [Ident "user2",Ident "getLastName"]),N (Name [Ident "lastName1",Ident "compareTo"])]}
UserEmailAddressComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "user1",Ident "getEmailAddress"]),N (Name [Ident "user2",Ident "getEmailAddress"]),N (Name [Ident "emailAddress1",Ident "compareTo"])]}
UserComparator.java: Statistics {nl = 7, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "lhs",Ident "getLogin"]),N (Name [Ident "rhs",Ident "getLogin"]),N (Name [Ident "rhsLogin",Ident "equals"]),N (Name [Ident "lhsLogin",Ident "equals"]),N (Name [Ident "lhsLogin",Ident "equals"]),N (Name [Ident "rhsLogin",Ident "equals"]),N (Name [Ident "CASE_INSENSITIVE_ORDER",Ident "compare"])]}
User.java: Statistics {nl = 3, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getPriority"]),N (Name [Ident "o",Ident "getPriority"])]}
TrashVersionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "trashVersion",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
TrashEntryModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "trashEntry",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
TopologySummary.java: Statistics {nl = 67, conditionals = 28, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"]),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"]),N (Name [Ident "is_set_num_tasks"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_num_tasks"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_num_tasks"]),N (Name [Ident "is_set_num_executors"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_num_executors"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_num_executors"]),N (Name [Ident "is_set_num_workers"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_num_workers"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_num_workers"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_uptime_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "is_set_status"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_status"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_status"]),N (Name [Ident "is_set_sched_status"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_sched_status"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_sched_status"]),N (Name [Ident "is_set_owner"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_owner"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_owner"])]}
TopologyInfo.java: Statistics {nl = 60, conditionals = 25, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"]),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_uptime_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "is_set_executors"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_executors"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_executors"]),N (Name [Ident "is_set_status"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_status"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_status"]),N (Name [Ident "is_set_errors"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_errors"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_errors"]),N (Name [Ident "is_set_sched_status"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_sched_status"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_sched_status"]),N (Name [Ident "is_set_owner"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_owner"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_owner"])]}
TopologyActionOptions.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"])]}
TimeZoneComparator.java: Statistics {nl = 8, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "timeZone1",Ident "getRawOffset"]),N (Name [Ident "timeZone1",Ident "getDSTSavings"]),N (Name [Ident "timeZone2",Ident "getRawOffset"]),N (Name [Ident "timeZone2",Ident "getDSTSavings"]),N (Name [Ident "totalOffset1",Ident "compareTo"]),N (Name [Ident "timeZone1",Ident "getID"]),N (Name [Ident "timeZone2",Ident "getID"]),N (Name [Ident "timeZoneId1",Ident "compareTo"])]}
TimerManagerTaskScheduler.java: Statistics {nl = 4, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getDelay"]),N (Name [Ident "other",Ident "getDelay"])]}
Time.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "a",Ident "calculator",Ident "copyFieldsFromTime"]),N (Name [Ident "b",Ident "calculator",Ident "copyFieldsFromTime"]),N (Name [Ident "TimeCalculator",Ident "compare"])]}
Time.java: Statistics {nl = 24, conditionals = 9, loops = 0, iterators = 0, fncalls = [N (Name [Ident "aObject",Ident "wallTime",Ident "getYear"]),N (Name [Ident "bObject",Ident "wallTime",Ident "getYear"]),N (Name [Ident "aObject",Ident "wallTime",Ident "getMonth"]),N (Name [Ident "bObject",Ident "wallTime",Ident "getMonth"]),N (Name [Ident "aObject",Ident "wallTime",Ident "getMonthDay"]),N (Name [Ident "bObject",Ident "wallTime",Ident "getMonthDay"]),N (Name [Ident "aObject",Ident "wallTime",Ident "getHour"]),N (Name [Ident "bObject",Ident "wallTime",Ident "getHour"]),N (Name [Ident "aObject",Ident "wallTime",Ident "getMinute"]),N (Name [Ident "bObject",Ident "wallTime",Ident "getMinute"]),N (Name [Ident "aObject",Ident "wallTime",Ident "getSecond"]),N (Name [Ident "bObject",Ident "wallTime",Ident "getSecond"]),N (Name [Ident "aObject",Ident "toMillis"]),N (Name [Ident "bObject",Ident "toMillis"]),N (Name [Ident "aObject",Ident "timezone",Ident "equals"])]}
TicketModelImpl.java: Statistics {nl = 9, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getTicketId"]),N (Name [Ident "ticket",Ident "getTicketId"]),N (Name [Ident "getTicketId"]),N (Name [Ident "ticket",Ident "getTicketId"])]}
ThriftSerializedObject.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"]),N (Name [Ident "is_set_bits"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_bits"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_bits"])]}
ThreadLastPostDateComparator.java: Statistics {nl = 15, conditionals = 5, loops = 0, iterators = 0, fncalls = [N (Name [Ident "thread1",Ident "getLastPostDate"]),N (Name [Ident "thread2",Ident "getLastPostDate"]),N (Name [Ident "DBFactoryUtil",Ident "getDB"]),N (Name [Ident "db",Ident "isSupportsDateMilliseconds"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "thread1",Ident "getThreadId"]),N (Name [Ident "thread2",Ident "getThreadId"]),N (Name [Ident "thread1",Ident "getThreadId"]),N (Name [Ident "thread2",Ident "getThreadId"])]}
TextureDescriptor.java: Statistics {nl = 19, conditionals = 19, loops = 0, iterators = 0, fncalls = [N (Name [Ident "texture",Ident "getTextureObjectHandle"]),N (Name [Ident "o",Ident "texture",Ident "getTextureObjectHandle"]),N (Name [Ident "minFilter",Ident "getGLEnum"]),N (Name [Ident "o",Ident "minFilter",Ident "getGLEnum"]),N (Name [Ident "magFilter",Ident "getGLEnum"]),N (Name [Ident "o",Ident "magFilter",Ident "getGLEnum"]),N (Name [Ident "uWrap",Ident "getGLEnum"]),N (Name [Ident "o",Ident "uWrap",Ident "getGLEnum"]),N (Name [Ident "vWrap",Ident "getGLEnum"]),N (Name [Ident "o",Ident "vWrap",Ident "getGLEnum"])]}
TextureAttribute.java: Statistics {nl = 17, conditionals = 12, loops = 0, iterators = 0, fncalls = [N (Name [Ident "textureDescription",Ident "compareTo"]),N (Name [Ident "MathUtils",Ident "isEqual"]),N (Name [Ident "MathUtils",Ident "isEqual"]),N (Name [Ident "MathUtils",Ident "isEqual"]),N (Name [Ident "MathUtils",Ident "isEqual"])]}
TestObject.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [I (Ident "getName"),I (Ident "compareTo")]}
TestGrouping.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "class1",Ident "getSimpleName"]),N (Name [Ident "class2",Ident "getSimpleName"]),I (Ident "compareTo"),N (Name [Ident "class1",Ident "getName"]),N (Name [Ident "class2",Ident "getName"]),I (Ident "compareTo")]}
TermSuggestion.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "second",Ident "getScore"]),N (Name [Ident "first",Ident "getScore"]),N (Name [Ident "Float",Ident "compare"]),N (Name [Ident "FREQUENCY",Ident "compare"])]}
TermSuggestion.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [I (Ident "getFreq"),I (Ident "getFreq"),N (Name [Ident "second",Ident "getScore"]),N (Name [Ident "first",Ident "getScore"]),N (Name [Ident "Float",Ident "compare"]),N (Name [Ident "first",Ident "getText"]),N (Name [Ident "second",Ident "getText"]),I (Ident "compareTo")]}
TemplateVersionVersionComparator.java: Statistics {nl = 22, conditionals = 8, loops = 0, iterators = 0, fncalls = [N (Name [Ident "templateVersion1",Ident "getVersion"]),N (Name [Ident "templateVersion2",Ident "getVersion"]),N (Name [Ident "StringUtil",Ident "split"]),N (Name [Ident "StringUtil",Ident "split"])]}
TemplateIdComparator.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "template1",Ident "getTemplateId"]),N (Name [Ident "template2",Ident "getTemplateId"])]}
TeamModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "team",Ident "getName"]),I (Ident "compareTo")]}
SystemEventModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "systemEvent",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
SyncOperation.java: Statistics {nl = 10, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "Math",Ident "max"]),N (Name [Ident "Math",Ident "max"])]}
SupervisorSummary.java: Statistics {nl = 46, conditionals = 19, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_host"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_host"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_host"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_uptime_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "is_set_num_workers"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_num_workers"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_num_workers"]),N (Name [Ident "is_set_num_used_workers"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_num_used_workers"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_num_used_workers"]),N (Name [Ident "is_set_supervisor_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_supervisor_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_supervisor_id"]),N (Name [Ident "is_set_version"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_version"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_version"])]}
SupervisorInfo.java: Statistics {nl = 60, conditionals = 25, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_time_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_time_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_time_secs"]),N (Name [Ident "is_set_hostname"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_hostname"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_hostname"]),N (Name [Ident "is_set_assignment_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_assignment_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_assignment_id"]),N (Name [Ident "is_set_used_ports"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_used_ports"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_used_ports"]),N (Name [Ident "is_set_meta"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_meta"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_meta"]),N (Name [Ident "is_set_scheduler_meta"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_scheduler_meta"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_scheduler_meta"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_uptime_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "is_set_version"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_version"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_version"])]}
SubscriptionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "subscription",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
SubscriptionClassNameIdComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "subscription1",Ident "getClassNameId"]),N (Name [Ident "subscription2",Ident "getClassNameId"]),N (Name [Ident "subscription1",Ident "getClassNameId"]),N (Name [Ident "subscription2",Ident "getClassNameId"])]}
SubmitOptions.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_initial_status"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_initial_status"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_initial_status"]),N (Name [Ident "is_set_creds"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_creds"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_creds"])]}
StructureVersionVersionComparator.java: Statistics {nl = 22, conditionals = 8, loops = 0, iterators = 0, fncalls = [N (Name [Ident "structureVersion1",Ident "getVersion"]),N (Name [Ident "structureVersion2",Ident "getVersion"]),N (Name [Ident "StringUtil",Ident "split"]),N (Name [Ident "StringUtil",Ident "split"])]}
StructureStructureKeyComparator.java: Statistics {nl = 8, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "structure1",Ident "getStructureKey"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "structure2",Ident "getStructureKey"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "structureKey1",Ident "compareTo"])]}
StructureIdComparator.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "structure1",Ident "getStructureId"]),N (Name [Ident "structure2",Ident "getStructureId"])]}
StringComparator.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "s1",Ident "compareTo"]),N (Name [Ident "s1",Ident "compareToIgnoreCase"])]}
StreamInfo.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_output_fields"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_output_fields"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_output_fields"]),N (Name [Ident "is_set_direct"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_direct"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_direct"])]}
StormTopology.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_spouts"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_spouts"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_spouts"]),N (Name [Ident "is_set_bolts"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_bolts"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_bolts"]),N (Name [Ident "is_set_state_spouts"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_state_spouts"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_state_spouts"])]}
StormBase.java: Statistics {nl = 60, conditionals = 25, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"]),N (Name [Ident "is_set_status"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_status"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_status"]),N (Name [Ident "is_set_num_workers"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_num_workers"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_num_workers"]),N (Name [Ident "is_set_component_executors"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_component_executors"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_component_executors"]),N (Name [Ident "is_set_launch_time_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_launch_time_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_launch_time_secs"]),N (Name [Ident "is_set_owner"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_owner"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_owner"]),N (Name [Ident "is_set_topology_action_options"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_topology_action_options"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_topology_action_options"]),N (Name [Ident "is_set_prev_status"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_prev_status"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_prev_status"])]}
StatsUserLastPostDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "statsUser1",Ident "getLastPostDate"]),N (Name [Ident "statsUser2",Ident "getLastPostDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
StateSpoutSpec.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_state_spout_object"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_state_spout_object"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_state_spout_object"]),N (Name [Ident "is_set_common"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_common"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_common"])]}
State.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getId"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "state",Ident "getId"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),I (Ident "compareTo"),N (Name [Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "state",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),I (Ident "compareTo"),N (Name [Ident "getName"]),N (Name [Ident "state",Ident "getName"]),N (Name [Ident "getId"]),N (Name [Ident "state",Ident "getId"])]}
StandardTypeComparator.java: Statistics {nl = 32, conditionals = 13, loops = 0, iterators = 0, fncalls = [N (Name [Ident "NumberUtils",Ident "convertNumberToTargetClass"]),N (Name [Ident "NumberUtils",Ident "convertNumberToTargetClass"]),N (Name [Ident "leftBigDecimal",Ident "compareTo"]),N (Name [Ident "leftNumber",Ident "doubleValue"]),N (Name [Ident "rightNumber",Ident "doubleValue"]),N (Name [Ident "Double",Ident "compare"]),N (Name [Ident "leftNumber",Ident "floatValue"]),N (Name [Ident "rightNumber",Ident "floatValue"]),N (Name [Ident "Float",Ident "compare"]),N (Name [Ident "NumberUtils",Ident "convertNumberToTargetClass"]),N (Name [Ident "NumberUtils",Ident "convertNumberToTargetClass"]),N (Name [Ident "leftBigInteger",Ident "compareTo"]),N (Name [Ident "leftNumber",Ident "longValue"]),N (Name [Ident "rightNumber",Ident "longValue"]),N (Name [Ident "compare"]),N (Name [Ident "leftNumber",Ident "intValue"]),N (Name [Ident "rightNumber",Ident "intValue"]),N (Name [Ident "compare"]),N (Name [Ident "leftNumber",Ident "shortValue"]),N (Name [Ident "rightNumber",Ident "shortValue"]),N (Name [Ident "compare"]),N (Name [Ident "leftNumber",Ident "byteValue"]),N (Name [Ident "rightNumber",Ident "byteValue"]),N (Name [Ident "compare"]),N (Name [Ident "leftNumber",Ident "doubleValue"]),N (Name [Ident "rightNumber",Ident "doubleValue"]),N (Name [Ident "Double",Ident "compare"]),I (Ident "compareTo")]}
StagedModelModifiedDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "stagedModel1",Ident "getModifiedDate"]),N (Name [Ident "stagedModel2",Ident "getModifiedDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
SpoutStats.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_acked"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_acked"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_acked"]),N (Name [Ident "is_set_failed"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_failed"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_failed"]),N (Name [Ident "is_set_complete_ms_avg"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_complete_ms_avg"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_complete_ms_avg"])]}
SpoutSpec.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_spout_object"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_spout_object"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_spout_object"]),N (Name [Ident "is_set_common"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_common"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_common"])]}
SpdySession.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "activeStreams",Ident "get"]),N (Name [Ident "activeStreams",Ident "get"]),N (Name [Ident "state1",Ident "getPriority"]),N (Name [Ident "state2",Ident "getPriority"])]}
SortedArrayList.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "comparator1",Ident "compareTo"]),N (Name [Ident "_comparator",Ident "compare"])]}
SocialRequestModelImpl.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getRequestId"]),N (Name [Ident "socialRequest",Ident "getRequestId"]),N (Name [Ident "getRequestId"]),N (Name [Ident "socialRequest",Ident "getRequestId"])]}
SocialRelationModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "socialRelation",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
SocialActivitySettingModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "socialActivitySetting",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
SocialActivitySetModifiedDateComparator.java: Statistics {nl = 11, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "activitySet1",Ident "getModifiedDate"]),N (Name [Ident "activitySet2",Ident "getModifiedDate"])]}
SocialActivitySetModelImpl.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getModifiedDate"]),N (Name [Ident "socialActivitySet",Ident "getModifiedDate"]),N (Name [Ident "getModifiedDate"]),N (Name [Ident "socialActivitySet",Ident "getModifiedDate"])]}
SocialActivityModelImpl.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "socialActivity",Ident "getCreateDate"]),N (Name [Ident "getCreateDate"]),N (Name [Ident "socialActivity",Ident "getCreateDate"])]}
SocialActivityLimitModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "socialActivityLimit",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
SocialActivityCounterModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "socialActivityCounter",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
SocialActivityAchievementModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "socialActivityAchievement",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
SizeAreaComparator.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "checkNotNull"]),N (Name [Ident "checkNotNull"]),N (Name [Ident "size",Ident "equals"]),N (Name [Ident "size",Ident "getWidth"]),N (Name [Ident "size2",Ident "getWidth"]),N (Name [Ident "size",Ident "getHeight"]),N (Name [Ident "size2",Ident "getHeight"])]}
Size.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "Long",Ident "compare"]),N (Name [Ident "toBytes"]),N (Name [Ident "other",Ident "toBytes"]),N (Name [Ident "Long",Ident "compare"])]}
SimpMessageTypeMessageCondition.java: Statistics {nl = 9, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "message",Ident "getHeaders"]),N (Name [Ident "SimpMessageHeaderAccessor",Ident "getMessageType"]),N (Name [Ident "other",Ident "getMessageType"]),N (Name [Ident "actualMessageType",Ident "equals"]),I (Ident "getMessageType"),N (Name [Ident "actualMessageType",Ident "equals"]),I (Ident "getMessageType"),N (Name [Ident "actualMessageType",Ident "equals"]),N (Name [Ident "other",Ident "getMessageType"]),N (Name [Ident "actualMessageType",Ident "equals"])]}
SimpMessageMappingInfo.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [I (Ident "compareTo"),I (Ident "compareTo")]}
SimpleOrthoGroupStrategy.java: Statistics {nl = 3, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "a",Ident "getZ"]),N (Name [Ident "b",Ident "getZ"]),N (Name [Ident "a",Ident "getZ"]),N (Name [Ident "b",Ident "getZ"])]}
Signal.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "constant",Ident "compareTo"])]}
ShortWrapper.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getValue"]),N (Name [Ident "shortWrapper",Ident "getValue"]),N (Name [Ident "getValue"]),N (Name [Ident "shortWrapper",Ident "getValue"])]}
ShoppingOrderModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "shoppingOrder",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
ShoppingOrderItemModelImpl.java: Statistics {nl = 8, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "shoppingOrderItem",Ident "getName"]),I (Ident "compareTo"),N (Name [Ident "getDescription"]),N (Name [Ident "shoppingOrderItem",Ident "getDescription"]),I (Ident "compareTo")]}
ShoppingItemPriceModelImpl.java: Statistics {nl = 16, conditionals = 6, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getItemId"]),N (Name [Ident "shoppingItemPrice",Ident "getItemId"]),N (Name [Ident "getItemId"]),N (Name [Ident "shoppingItemPrice",Ident "getItemId"]),N (Name [Ident "getItemPriceId"]),N (Name [Ident "shoppingItemPrice",Ident "getItemPriceId"]),N (Name [Ident "getItemPriceId"]),N (Name [Ident "shoppingItemPrice",Ident "getItemPriceId"])]}
ShoppingItemModelImpl.java: Statistics {nl = 9, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getItemId"]),N (Name [Ident "shoppingItem",Ident "getItemId"]),N (Name [Ident "getItemId"]),N (Name [Ident "shoppingItem",Ident "getItemId"])]}
ShoppingItemFieldModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getItemId"]),N (Name [Ident "shoppingItemField",Ident "getItemId"]),N (Name [Ident "getItemId"]),N (Name [Ident "shoppingItemField",Ident "getItemId"]),N (Name [Ident "getName"]),N (Name [Ident "shoppingItemField",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
ShoppingCouponModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "shoppingCoupon",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
ShoppingCategoryModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getParentCategoryId"]),N (Name [Ident "shoppingCategory",Ident "getParentCategoryId"]),N (Name [Ident "getParentCategoryId"]),N (Name [Ident "shoppingCategory",Ident "getParentCategoryId"]),N (Name [Ident "getName"]),N (Name [Ident "shoppingCategory",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
ShoppingCartModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "shoppingCart",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ShoppingCartItemImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getItem"]),N (Name [Ident "cartItem",Ident "getItem"]),I (Ident "compareTo"),N (Name [Ident "getFields"]),N (Name [Ident "cartItem",Ident "getFields"]),I (Ident "compareTo")]}
ShellComponent.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_execution_command"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_execution_command"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_execution_command"]),N (Name [Ident "is_set_script"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_script"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_script"])]}
ShardModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "shard",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ShardId.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "index",Ident "name"]),N (Name [Ident "o",Ident "getIndex"]),I (Ident "compareTo"),N (Name [Ident "o",Ident "getId"]),N (Name [Ident "o",Ident "getId"]),N (Name [Ident "Integer",Ident "compare"])]}
ShaderTest.java: Statistics {nl = 4, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "MathUtils",Ident "isEqual"])]}
ServiceReferenceServiceTupleComparator.java: Statistics {nl = 5, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "serviceReferenceServiceTuple1",Ident "getServiceReference"]),N (Name [Ident "serviceReferenceServiceTuple2",Ident "getServiceReference"]),N (Name [Ident "_comparator",Ident "compare"])]}
ServiceComponentModelImpl.java: Statistics {nl = 14, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getBuildNamespace"]),N (Name [Ident "serviceComponent",Ident "getBuildNamespace"]),I (Ident "compareTo"),N (Name [Ident "getBuildNumber"]),N (Name [Ident "serviceComponent",Ident "getBuildNumber"]),N (Name [Ident "getBuildNumber"]),N (Name [Ident "serviceComponent",Ident "getBuildNumber"])]}
SearchShardTarget.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "index",Ident "string"]),N (Name [Ident "o",Ident "index"]),I (Ident "compareTo")]}
ScriptRouter.java: Statistics {nl = 4, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "o",Ident "getClass"]),N (Name [Ident "rule",Ident "compareTo"])]}
SCProductVersionModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "scProductVersion",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
SCProductScreenshotModelImpl.java: Statistics {nl = 16, conditionals = 6, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getProductEntryId"]),N (Name [Ident "scProductScreenshot",Ident "getProductEntryId"]),N (Name [Ident "getProductEntryId"]),N (Name [Ident "scProductScreenshot",Ident "getProductEntryId"]),N (Name [Ident "getPriority"]),N (Name [Ident "scProductScreenshot",Ident "getPriority"]),N (Name [Ident "getPriority"]),N (Name [Ident "scProductScreenshot",Ident "getPriority"])]}
SCProductEntryModelImpl.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getModifiedDate"]),N (Name [Ident "scProductEntry",Ident "getModifiedDate"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "getName"]),N (Name [Ident "scProductEntry",Ident "getName"]),I (Ident "compareTo")]}
SCLicenseModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "scLicense",Ident "getName"]),I (Ident "compareTo")]}
ScheduledFutureTask.java: Statistics {nl = 13, conditionals = 5, loops = 0, iterators = 0, fncalls = [N (Name [Ident "deadlineNanos"]),N (Name [Ident "that",Ident "deadlineNanos"])]}
SCFrameworkVersionModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "scFrameworkVersion",Ident "getName"]),I (Ident "compareTo")]}
SACPEntryModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "sacpEntry",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
RuleGroupInstancePriorityComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ruleGroupInstance2",Ident "getPriority"]),N (Name [Ident "ruleGroupInstance1",Ident "getPriority"])]}
RootsFragment.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "DocumentInfo",Ident "compareToIgnoreCaseNullable"]),N (Name [Ident "DocumentInfo",Ident "compareToIgnoreCaseNullable"])]}
RoleTypeComparator.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "role1",Ident "getType"]),N (Name [Ident "role2",Ident "getType"]),N (Name [Ident "role1",Ident "getType"]),N (Name [Ident "role2",Ident "getType"]),N (Name [Ident "role1",Ident "getName"]),N (Name [Ident "role2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
RoleRoleIdComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "role1",Ident "getRoleId"]),N (Name [Ident "role2",Ident "getRoleId"]),N (Name [Ident "role1",Ident "getRoleId"]),N (Name [Ident "role2",Ident "getRoleId"])]}
RoleNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "role1",Ident "getName"]),N (Name [Ident "role2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
RoleModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "role",Ident "getName"]),I (Ident "compareTo")]}
RoleDescriptionComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "role1",Ident "getDescription"]),N (Name [Ident "role2",Ident "getDescription"]),N (Name [Ident "description1",Ident "compareTo"]),N (Name [Ident "role1",Ident "getName"]),N (Name [Ident "role2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
ReverseDocComparatorSource.java: Statistics {nl = 10, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "_inner",Ident "compareTo"])]}
ResourceTypePermissionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "resourceTypePermission",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ResourcePermissionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "resourcePermission",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ResourceBlockPermissionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "resourceBlockPermission",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ResourceBlockModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "resourceBlock",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ResourceActionModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "resourceAction",Ident "getName"]),I (Ident "compareTo"),N (Name [Ident "getBitwiseValue"]),N (Name [Ident "resourceAction",Ident "getBitwiseValue"]),N (Name [Ident "getBitwiseValue"]),N (Name [Ident "resourceAction",Ident "getBitwiseValue"])]}
ResourceActionBitwiseValueComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "resourceAction1",Ident "getBitwiseValue"]),N (Name [Ident "resourceAction2",Ident "getBitwiseValue"])]}
ResolverActivity.java: Statistics {nl = 18, conditionals = 9, loops = 0, iterators = 0, fncalls = [N (Name [Ident "isSpecificUriMatch"]),N (Name [Ident "isSpecificUriMatch"]),N (Name [Ident "getPackageTimeSpent"]),N (Name [Ident "getPackageTimeSpent"]),N (Name [Ident "lhs",Ident "loadLabel"]),N (Name [Ident "rhs",Ident "loadLabel"]),N (Name [Ident "sa",Ident "toString"]),N (Name [Ident "sb",Ident "toString"]),N (Name [Ident "mCollator",Ident "compare"])]}
ResolveInfo.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "a",Ident "loadLabel"]),N (Name [Ident "b",Ident "loadLabel"]),N (Name [Ident "sa",Ident "toString"]),N (Name [Ident "sb",Ident "toString"]),N (Name [Ident "mCollator",Ident "compare"])]}
ReschedulingRunnable.java: Statistics {nl = 4, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getDelay"]),N (Name [Ident "other",Ident "getDelay"])]}
RequestMappingInfo.java: Statistics {nl = 22, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "other",Ident "getPatternsCondition"]),I (Ident "compareTo"),N (Name [Ident "other",Ident "getParamsCondition"]),I (Ident "compareTo"),N (Name [Ident "other",Ident "getHeadersCondition"]),I (Ident "compareTo"),N (Name [Ident "other",Ident "getConsumesCondition"]),I (Ident "compareTo"),N (Name [Ident "other",Ident "getProducesCondition"]),I (Ident "compareTo"),N (Name [Ident "other",Ident "getMethodsCondition"]),I (Ident "compareTo"),I (Ident "compareTo")]}
RequestConditionHolder.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "assertEqualConditionTypes"]),I (Ident "compareTo")]}
Request.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [I (Ident "compareTo")]}
RepositoryModelSizeComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSize"]),N (Name [Ident "getSize"]),N (Name [Ident "size1",Ident "compareTo"])]}
RepositoryModelReadCountComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getReadCount"]),N (Name [Ident "getReadCount"]),N (Name [Ident "readCount1",Ident "compareTo"])]}
RepositoryModelNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "getName"]),N (Name [Ident "name1",Ident "compareToIgnoreCase"])]}
RepositoryModelModifiedDateComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getModifiedDate"]),N (Name [Ident "getModifiedDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
RepositoryModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "repository",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
RepositoryModelCreateDateComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
RepositoryEntryModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "repositoryEntry",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
RemoveTypeUsedCountSmall.java: Statistics {nl = 1, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"])]}
RemoveTypeUsedCountBig.java: Statistics {nl = 1, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj2",Ident "getUsedCount"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"]),N (Name [Ident "obj1",Ident "getUsedCount"])]}
RemoveTypePriorityLow.java: Statistics {nl = 1, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj1",Ident "getPriority"]),N (Name [Ident "obj2",Ident "getPriority"]),N (Name [Ident "obj1",Ident "getPriority"]),N (Name [Ident "obj2",Ident "getPriority"])]}
RemoveTypePriorityHigh.java: Statistics {nl = 1, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj2",Ident "getPriority"]),N (Name [Ident "obj1",Ident "getPriority"]),N (Name [Ident "obj2",Ident "getPriority"]),N (Name [Ident "obj1",Ident "getPriority"])]}
RemoveTypeLastUsedTimeLast.java: Statistics {nl = 1, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj2",Ident "getLastUsedTime"]),N (Name [Ident "obj1",Ident "getLastUsedTime"]),N (Name [Ident "obj2",Ident "getLastUsedTime"]),N (Name [Ident "obj1",Ident "getLastUsedTime"])]}
RemoveTypeLastUsedTimeFirst.java: Statistics {nl = 1, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj1",Ident "getLastUsedTime"]),N (Name [Ident "obj2",Ident "getLastUsedTime"]),N (Name [Ident "obj1",Ident "getLastUsedTime"]),N (Name [Ident "obj2",Ident "getLastUsedTime"])]}
RemoveTypeFileSmall.java: Statistics {nl = 7, conditionals = 8, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj1",Ident "getData"]),N (Name [Ident "FileUtils",Ident "getFileSize"]),N (Name [Ident "obj2",Ident "getData"]),N (Name [Ident "FileUtils",Ident "getFileSize"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"])]}
RemoveTypeFileLarge.java: Statistics {nl = 7, conditionals = 8, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj1",Ident "getData"]),N (Name [Ident "FileUtils",Ident "getFileSize"]),N (Name [Ident "obj2",Ident "getData"]),N (Name [Ident "FileUtils",Ident "getFileSize"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"])]}
RemoveTypeEnterTimeLast.java: Statistics {nl = 1, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getEnterTime"])]}
RemoveTypeEnterTimeFirst.java: Statistics {nl = 1, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"])]}
RemoveTypeBitmapSmall.java: Statistics {nl = 7, conditionals = 6, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSize"]),N (Name [Ident "getSize"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"])]}
RemoveTypeBitmapLarge.java: Statistics {nl = 7, conditionals = 6, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSize"]),N (Name [Ident "getSize"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getEnterTime"]),N (Name [Ident "obj2",Ident "getEnterTime"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"]),N (Name [Ident "obj1",Ident "getUsedCount"]),N (Name [Ident "obj2",Ident "getUsedCount"])]}
ReleaseModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "release",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
RegisteredServiceProvider.java: Statistics {nl = 3, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "priority",Ident "ordinal"]),N (Name [Ident "other",Ident "getPriority"]),I (Ident "ordinal"),N (Name [Ident "priority",Ident "ordinal"]),N (Name [Ident "other",Ident "getPriority"]),I (Ident "ordinal")]}
RegionModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "region",Ident "getName"]),I (Ident "compareTo")]}
RebalanceOptions.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_wait_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_wait_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_wait_secs"]),N (Name [Ident "is_set_num_workers"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_num_workers"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_num_workers"]),N (Name [Ident "is_set_num_executors"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_num_executors"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_num_executors"])]}
RatingsStatsModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ratingsStats",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
RatingsEntryModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ratingsEntry",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
RankableObjectWithFields.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [I (Ident "getCount"),N (Name [Ident "other",Ident "getCount"])]}
Queue.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [I (Ident "getTime"),N (Name [Ident "that",Ident "timestamp",Ident "getTime"]),I (Ident "compareTo"),I (Ident "getId"),N (Name [Ident "that",Ident "getId"]),I (Ident "getId"),N (Name [Ident "that",Ident "getId"])]}
Publisher.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "lhs",Ident "getInstance"]),N (Name [Ident "classify"]),N (Name [Ident "rhs",Ident "getInstance"]),N (Name [Ident "classify"]),N (Name [Ident "lhs",Ident "compareTo"])]}
ProductEntryTypeComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "productEntry1",Ident "getType"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "productEntry2",Ident "getType"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "type1",Ident "compareTo"])]}
ProductEntryNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "productEntry1",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "productEntry2",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "name1",Ident "compareTo"])]}
ProductEntryModifiedDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "productEntry1",Ident "getModifiedDate"]),N (Name [Ident "productEntry2",Ident "getModifiedDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
ProductEntryCreateDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "productEntry1",Ident "getCreateDate"]),N (Name [Ident "productEntry2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
PortletTitleComparator.java: Statistics {nl = 8, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "PortalUtil",Ident "getPortletTitle"]),N (Name [Ident "PortalUtil",Ident "getPortletTitle"]),N (Name [Ident "PortalUtil",Ident "getPortletTitle"]),N (Name [Ident "PortalUtil",Ident "getPortletTitle"]),N (Name [Ident "portletTitle1",Ident "compareTo"])]}
PortletPreferencesModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "portletPreferences",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
PortletNameComparator.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "portlet1",Ident "getPortletName"]),N (Name [Ident "GetterUtil",Ident "getString"]),N (Name [Ident "portlet2",Ident "getPortletName"]),N (Name [Ident "GetterUtil",Ident "getString"]),N (Name [Ident "portletName1",Ident "compareTo"])]}
PortletModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "portlet",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
PortletLuceneComparator.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "portlet1",Ident "getPortletId"]),N (Name [Ident "portlet2",Ident "getPortletId"]),N (Name [Ident "portletId1",Ident "compareTo"]),N (Name [Ident "portletId2",Ident "equals"]),N (Name [Ident "portletId1",Ident "equals"])]}
PortletItemModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "portletItem",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
PortletControlPanelWeightComparator.java: Statistics {nl = 8, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "portlet1",Ident "getControlPanelEntryWeight"]),N (Name [Ident "portlet2",Ident "getControlPanelEntryWeight"]),N (Name [Ident "Double",Ident "compare"]),N (Name [Ident "portlet1",Ident "getPortletId"]),N (Name [Ident "portlet2",Ident "getPortletId"]),N (Name [Ident "portletId1",Ident "compareTo"])]}
PortalPreferencesModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "portalPreferences",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
PortalCacheClusterEventCoalesceComparator.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "portalCacheClusterEvent2",Ident "getElementValue"]),N (Name [Ident "portalCacheClusterEvent1",Ident "setElementValue"]),N (Name [Ident "portalCacheClusterEvent1",Ident "getElementKey"]),N (Name [Ident "portalCacheClusterEvent2",Ident "getElementKey"]),N (Name [Ident "Validator",Ident "equals"]),N (Name [Ident "portalCacheClusterEvent1",Ident "getEventType"]),N (Name [Ident "portalCacheClusterEvent2",Ident "getEventType"]),N (Name [Ident "portalCacheClusterEvent1",Ident "getPortalCacheManagerName"]),N (Name [Ident "portalCacheClusterEvent2",Ident "getPortalCacheManagerName"]),N (Name [Ident "Validator",Ident "equals"]),N (Name [Ident "portalCacheClusterEvent1",Ident "getPortalCacheName"]),N (Name [Ident "portalCacheClusterEvent2",Ident "getPortalCacheName"]),N (Name [Ident "Validator",Ident "equals"])]}
PollsVoteModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "pollsVote",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
PollsQuestionModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "pollsQuestion",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
PollsChoiceModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getQuestionId"]),N (Name [Ident "pollsChoice",Ident "getQuestionId"]),N (Name [Ident "getQuestionId"]),N (Name [Ident "pollsChoice",Ident "getQuestionId"]),N (Name [Ident "getName"]),N (Name [Ident "pollsChoice",Ident "getName"]),I (Ident "compareTo")]}
PluginSettingModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "pluginSetting",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
PluginPackageNameAndContextComparator.java: Statistics {nl = 8, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "package1",Ident "getName"]),N (Name [Ident "package2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"]),N (Name [Ident "package1",Ident "getContext"]),N (Name [Ident "package2",Ident "getContext"]),N (Name [Ident "context1",Ident "compareTo"])]}
PluginId.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "name",Ident "compareTo"]),N (Name [Ident "release",Ident "compareTo"])]}
PicassoExecutorService.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "hunter",Ident "getPriority"]),N (Name [Ident "other",Ident "hunter",Ident "getPriority"]),N (Name [Ident "p2",Ident "ordinal"]),N (Name [Ident "p1",Ident "ordinal"])]}
PhoneModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "phone",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
PermissionGroup.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [I (Ident "compareOrder"),N (Name [Ident "that",Ident "compareOrder"]),N (Name [Ident "id"]),N (Name [Ident "that",Ident "id"]),I (Ident "compareTo")]}
PermissionDisplay.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getPortletLabel"]),N (Name [Ident "permissionDisplay",Ident "getPortletLabel"]),I (Ident "compareTo"),N (Name [Ident "getModelLabel"]),N (Name [Ident "permissionDisplay",Ident "getModelLabel"]),I (Ident "compareTo"),N (Name [Ident "getActionLabel"]),N (Name [Ident "permissionDisplay",Ident "getActionLabel"]),I (Ident "compareTo")]}
PasswordTrackerModelImpl.java: Statistics {nl = 14, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getUserId"]),N (Name [Ident "passwordTracker",Ident "getUserId"]),N (Name [Ident "getUserId"]),N (Name [Ident "passwordTracker",Ident "getUserId"]),N (Name [Ident "getCreateDate"]),N (Name [Ident "passwordTracker",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
PasswordPolicyRelModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "passwordPolicyRel",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
PasswordPolicyNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "passwordPolicy1",Ident "getName"]),N (Name [Ident "passwordPolicy2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
PasswordPolicyModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "passwordPolicy",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
PasswordPolicyDescriptionComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "passwordPolicy1",Ident "getDescription"]),N (Name [Ident "passwordPolicy2",Ident "getDescription"]),N (Name [Ident "description1",Ident "compareTo"])]}
PageVersionComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "page1",Ident "getVersion"]),N (Name [Ident "page2",Ident "getVersion"]),N (Name [Ident "page1",Ident "getVersion"]),N (Name [Ident "page2",Ident "getVersion"])]}
PageTitleComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "title1",Ident "compareTo"])]}
PageCreateDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "page1",Ident "getCreateDate"]),N (Name [Ident "page2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
PackageItemInfo.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "aa",Ident "loadLabel"]),N (Name [Ident "ab",Ident "loadLabel"]),N (Name [Ident "sa",Ident "toString"]),N (Name [Ident "sb",Ident "toString"]),N (Name [Ident "sCollator",Ident "compare"])]}
OrgLaborModelImpl.java: Statistics {nl = 16, conditionals = 6, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getOrganizationId"]),N (Name [Ident "orgLabor",Ident "getOrganizationId"]),N (Name [Ident "getOrganizationId"]),N (Name [Ident "orgLabor",Ident "getOrganizationId"]),N (Name [Ident "getTypeId"]),N (Name [Ident "orgLabor",Ident "getTypeId"]),N (Name [Ident "getTypeId"]),N (Name [Ident "orgLabor",Ident "getTypeId"])]}
OrganizationTypeComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "organization1",Ident "getTypeOrder"]),N (Name [Ident "organization2",Ident "getTypeOrder"]),N (Name [Ident "organization1",Ident "getName"]),N (Name [Ident "organization2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
OrganizationNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "organization1",Ident "getName"]),N (Name [Ident "organization2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
OrganizationModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "organization",Ident "getName"]),I (Ident "compareTo")]}
OrganizationIdComparator.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "organization1",Ident "getOrganizationId"]),N (Name [Ident "organization2",Ident "getOrganizationId"])]}
OrderedHealthAggregator.java: Statistics {nl = 3, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "s1",Ident "getCode"]),I (Ident "indexOf"),N (Name [Ident "s2",Ident "getCode"]),I (Ident "indexOf"),N (Name [Ident "s1",Ident "getCode"]),N (Name [Ident "s2",Ident "getCode"]),I (Ident "compareTo")]}
OrderDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "order1",Ident "getCreateDate"]),N (Name [Ident "order2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
ObjectValuePairComparator.java: Statistics {nl = 11, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ovp1",Ident "getKey"]),N (Name [Ident "ovp2",Ident "getKey"]),N (Name [Ident "key1",Ident "compareTo"]),N (Name [Ident "key1",Ident "compareTo"]),N (Name [Ident "ovp1",Ident "getValue"]),N (Name [Ident "ovp2",Ident "getValue"]),N (Name [Ident "value1",Ident "compareTo"]),N (Name [Ident "value1",Ident "compareTo"])]}
ObjectUtils.java: Statistics {nl = 1, conditionals = 3, loops = 0, iterators = 0, fncalls = [I (Ident "compareTo")]}
Objects.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "c",Ident "compare"])]}
NullStruct.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals")]}
NullSafeStringComparator.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "s1",Ident "compareTo"])]}
NullSafeComparator.java: Statistics {nl = 7, conditionals = 5, loops = 0, iterators = 0, fncalls = [I (Ident "compare")]}
NotificationEventComparator.java: Statistics {nl = 10, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "notificationEvent1",Ident "equals"]),N (Name [Ident "notificationEvent1",Ident "getDeliverBy"]),N (Name [Ident "notificationEvent2",Ident "getDeliverBy"]),N (Name [Ident "notificationEvent1",Ident "getTimestamp"]),N (Name [Ident "notificationEvent2",Ident "getTimestamp"]),N (Name [Ident "notificationEvent1",Ident "hashCode"]),N (Name [Ident "notificationEvent2",Ident "hashCode"])]}
NotificationComparator.java: Statistics {nl = 13, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "left",Ident "getPackagePriority"]),N (Name [Ident "right",Ident "getPackagePriority"]),N (Name [Ident "Integer",Ident "compare"]),N (Name [Ident "left",Ident "sbn",Ident "getScore"]),N (Name [Ident "right",Ident "sbn",Ident "getScore"]),N (Name [Ident "Integer",Ident "compare"]),N (Name [Ident "left",Ident "getContactAffinity"]),N (Name [Ident "right",Ident "getContactAffinity"]),N (Name [Ident "Float",Ident "compare"]),N (Name [Ident "left",Ident "getRankingTimeMs"]),N (Name [Ident "right",Ident "getRankingTimeMs"]),N (Name [Ident "Long",Ident "compare"])]}
NotAliveException.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_msg"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_msg"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_msg"])]}
NodeInfo.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_node"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_node"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_node"]),N (Name [Ident "is_set_port"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_port"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_port"])]}
Nimbus.java: Statistics {nl = 32, conditionals = 13, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"]),N (Name [Ident "is_set_uploadedJarLocation"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_uploadedJarLocation"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_uploadedJarLocation"]),N (Name [Ident "is_set_jsonConf"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_jsonConf"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_jsonConf"]),N (Name [Ident "is_set_topology"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_topology"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_topology"])]}
Nimbus.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_ite"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_ite"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_ite"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 39, conditionals = 16, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"]),N (Name [Ident "is_set_uploadedJarLocation"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_uploadedJarLocation"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_uploadedJarLocation"]),N (Name [Ident "is_set_jsonConf"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_jsonConf"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_jsonConf"]),N (Name [Ident "is_set_topology"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_topology"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_topology"]),N (Name [Ident "is_set_options"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_options"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_options"])]}
Nimbus.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_ite"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_ite"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_ite"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"]),N (Name [Ident "is_set_options"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_options"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_options"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"]),N (Name [Ident "is_set_options"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_options"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_options"])]}
Nimbus.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_ite"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_ite"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_ite"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_name"]),N (Name [Ident "is_set_creds"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_creds"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_creds"])]}
Nimbus.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_ite"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_ite"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_ite"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals")]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_location"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_location"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_location"]),N (Name [Ident "is_set_chunk"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_chunk"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_chunk"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_location"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_location"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_location"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_file"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_file"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_file"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals")]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals")]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"])]}
Nimbus.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"]),N (Name [Ident "is_set_options"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_options"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_options"])]}
Nimbus.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"])]}
Nimbus.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"])]}
Nimbus.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
Nimbus.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"])]}
Nimbus.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
NetworkIdentitySet.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "isEmpty"]),N (Name [Ident "another",Ident "isEmpty"]),N (Name [Ident "iterator"]),I (Ident "next"),N (Name [Ident "another",Ident "iterator"]),I (Ident "next"),N (Name [Ident "ident",Ident "compareTo"])]}
NetworkIdentity.java: Statistics {nl = 10, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "Integer",Ident "compare"]),N (Name [Ident "Integer",Ident "compare"]),N (Name [Ident "mSubscriberId",Ident "compareTo"]),N (Name [Ident "mNetworkId",Ident "compareTo"]),N (Name [Ident "Boolean",Ident "compare"])]}
ModuleModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "module",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
MinSystemCPULoadFabricAgentSelector.java: Statistics {nl = 13, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "fabricAgent1",Ident "getFabricStatus"]),N (Name [Ident "fabricStatus1",Ident "getAdvancedOperatingSystemMXBean"]),N (Name [Ident "advancedOperatingSystemMXBean1",Ident "getSystemCpuLoad"]),N (Name [Ident "fabricAgent2",Ident "getFabricStatus"]),N (Name [Ident "fabricStatus2",Ident "getAdvancedOperatingSystemMXBean"]),N (Name [Ident "advancedOperatingSystemMXBean2",Ident "getSystemCpuLoad"]),N (Name [Ident "systemCpuLoad1",Ident "compareTo"])]}
MimeType.java: Statistics {nl = 13, conditionals = 6, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareParameters"]),N (Name [Ident "mimeType1",Ident "getSubtype"]),N (Name [Ident "mimeType2",Ident "getSubtype"]),I (Ident "equals"),N (Name [Ident "mimeType2",Ident "isWildcardSubtype"]),N (Name [Ident "mimeType1",Ident "isWildcardSubtype"]),N (Name [Ident "mimeType1",Ident "isWildcardSubtype"]),N (Name [Ident "mimeType2",Ident "isWildcardSubtype"]),N (Name [Ident "mimeType1",Ident "getType"]),N (Name [Ident "mimeType2",Ident "getType"]),I (Ident "equals"),N (Name [Ident "mimeType2",Ident "isWildcardType"]),N (Name [Ident "mimeType1",Ident "isWildcardType"]),N (Name [Ident "mimeType1",Ident "isWildcardType"]),N (Name [Ident "mimeType2",Ident "isWildcardType"])]}
MessagingController.java: Statistics {nl = 12, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "o1",Ident "getUid"]),N (Name [Ident "o2",Ident "getUid"]),N (Name [Ident "o1",Ident "getUid"]),N (Name [Ident "Integer",Ident "parseInt"]),N (Name [Ident "o2",Ident "getUid"]),N (Name [Ident "Integer",Ident "parseInt"])]}
MessageThreadComparator.java: Statistics {nl = 12, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "parentMessageId1",Ident "compareTo"]),N (Name [Ident "msg1",Ident "getCreateDate"]),N (Name [Ident "msg2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "messageId1",Ident "compareTo"])]}
MessageProvider.java: Statistics {nl = 5, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "object1",Ident "compareDate",Ident "compareTo"])]}
MessageListFragment.java: Statistics {nl = 5, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "cursor1",Ident "getColumnIndex"]),N (Name [Ident "cursor1",Ident "getLong"]),N (Name [Ident "cursor2",Ident "getLong"])]}
MessageListFragment.java: Statistics {nl = 3, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "cursor1",Ident "getInt"]),N (Name [Ident "cursor2",Ident "getInt"])]}
MessageListFragment.java: Statistics {nl = 3, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "cursor1",Ident "getInt"]),N (Name [Ident "cursor2",Ident "getInt"])]}
MessageListFragment.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "cursor1",Ident "getLong"]),N (Name [Ident "cursor2",Ident "getLong"])]}
MessageListFragment.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "cursor1",Ident "getLong"]),N (Name [Ident "cursor2",Ident "getLong"])]}
MessageListFragment.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "cursor1",Ident "getString"]),N (Name [Ident "cursor2",Ident "getString"]),N (Name [Ident "subject1",Ident "compareToIgnoreCase"])]}
MessageListFragment.java: Statistics {nl = 9, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSenderAddressFromCursor"]),N (Name [Ident "getSenderAddressFromCursor"]),N (Name [Ident "sender1",Ident "compareToIgnoreCase"])]}
MessageCreateDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "message1",Ident "getCreateDate"]),N (Name [Ident "message2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
MenuComparator.java: Statistics {nl = 7, conditionals = 5, loops = 0, iterators = 0, fncalls = [N (Name [Ident "o1",Ident "equals"]),N (Name [Ident "o1",Ident "getClass"]),I (Ident "getAnnotation"),I (Ident "order"),N (Name [Ident "o2",Ident "getClass"]),I (Ident "getAnnotation"),I (Ident "order")]}
MemoryFileUpload.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareTo"])]}
MemoryFileUpload.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "o",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
MemoryAttribute.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareTo"])]}
MemoryAssert.java: Statistics {nl = 2, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "className",Ident "compareTo"])]}
MembershipRequestModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "membershipRequest",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
MeetupsRegistrationModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getModifiedDate"]),N (Name [Ident "meetupsRegistration",Ident "getModifiedDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
MeetupsEntryModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getStartDate"]),N (Name [Ident "meetupsEntry",Ident "getStartDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
MediaSizeUtils.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mContext",Ident "getString"]),N (Name [Ident "getStandardForMediaSize"]),N (Name [Ident "getStandardForMediaSize"]),N (Name [Ident "rhsStandard",Ident "equals"]),N (Name [Ident "rhsStandard",Ident "equals"]),N (Name [Ident "lhsStandard",Ident "equals"]),N (Name [Ident "lhsStandard",Ident "compareTo"]),N (Name [Ident "mContext",Ident "getPackageManager"]),N (Name [Ident "lhs",Ident "getLabel"]),N (Name [Ident "mContext",Ident "getPackageManager"]),N (Name [Ident "rhs",Ident "getLabel"]),I (Ident "compareTo"),N (Name [Ident "lhsStandard",Ident "equals"])]}
MDRRuleModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mdrRule",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
MDRRuleGroupModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mdrRuleGroup",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
MDRRuleGroupInstanceModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mdrRuleGroupInstance",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
MDRActionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mdrAction",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
MBThreadModelImpl.java: Statistics {nl = 14, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getPriority"]),N (Name [Ident "mbThread",Ident "getPriority"]),N (Name [Ident "getPriority"]),N (Name [Ident "mbThread",Ident "getPriority"]),N (Name [Ident "getLastPostDate"]),N (Name [Ident "mbThread",Ident "getLastPostDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
MBThreadFlagModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mbThreadFlag",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
MBStatsUserModelImpl.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getMessageCount"]),N (Name [Ident "mbStatsUser",Ident "getMessageCount"]),N (Name [Ident "getMessageCount"]),N (Name [Ident "mbStatsUser",Ident "getMessageCount"])]}
MBMessageModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "mbMessage",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "getMessageId"]),N (Name [Ident "mbMessage",Ident "getMessageId"]),N (Name [Ident "getMessageId"]),N (Name [Ident "mbMessage",Ident "getMessageId"])]}
MBMailingListModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mbMailingList",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
MBDiscussionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mbDiscussion",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
MBCategoryModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getParentCategoryId"]),N (Name [Ident "mbCategory",Ident "getParentCategoryId"]),N (Name [Ident "getParentCategoryId"]),N (Name [Ident "mbCategory",Ident "getParentCategoryId"]),N (Name [Ident "getName"]),N (Name [Ident "mbCategory",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
MBBanModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mbBan",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
MaxHistory.java: Statistics {nl = 6, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "isNewTest"]),N (Name [Ident "isNewTest"]),N (Name [Ident "getFailure"]),N (Name [Ident "getFailure"]),I (Ident "compareTo"),N (Name [Ident "getTestDuration"]),N (Name [Ident "getTestDuration"]),I (Ident "compareTo")]}
MaxFreePhysicalMemoryFabricAgentSelector.java: Statistics {nl = 13, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "fabricAgent1",Ident "getFabricStatus"]),N (Name [Ident "fabricStatus1",Ident "getAdvancedOperatingSystemMXBean"]),N (Name [Ident "advancedOperatingSystemMXBean1",Ident "getFreePhysicalMemorySize"]),N (Name [Ident "fabricAgent2",Ident "getFabricStatus"]),N (Name [Ident "fabricStatus2",Ident "getAdvancedOperatingSystemMXBean"]),N (Name [Ident "advancedOperatingSystemMXBean2",Ident "getFreePhysicalMemorySize"]),N (Name [Ident "freePhysicalMemorySize1",Ident "compareTo"])]}
MainClassFinder.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getDepth"]),N (Name [Ident "getDepth"]),N (Name [Ident "d1",Ident "compareTo"]),N (Name [Ident "o1",Ident "getName"]),N (Name [Ident "o2",Ident "getName"]),I (Ident "compareTo")]}
LSWorkerHeartbeat.java: Statistics {nl = 32, conditionals = 13, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_time_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_time_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_time_secs"]),N (Name [Ident "is_set_topology_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_topology_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_topology_id"]),N (Name [Ident "is_set_executors"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_executors"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_executors"]),N (Name [Ident "is_set_port"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_port"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_port"])]}
LSSupervisorId.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_supervisor_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_supervisor_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_supervisor_id"])]}
LSSupervisorAssignments.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_assignments"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_assignments"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_assignments"])]}
LSApprovedWorkers.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_approved_workers"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_approved_workers"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_approved_workers"])]}
LongWrapper.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getValue"]),N (Name [Ident "longWrapper",Ident "getValue"]),N (Name [Ident "getValue"]),N (Name [Ident "longWrapper",Ident "getValue"])]}
LockModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "lock",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
LocalStateData.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_serialized_parts"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_serialized_parts"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_serialized_parts"])]}
LocalAssignment.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_topology_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_topology_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_topology_id"]),N (Name [Ident "is_set_executors"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_executors"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_executors"])]}
ListTypeModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "listType",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
LayoutSetPrototypeModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "layoutSetPrototype",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
LayoutSetModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "layoutSet",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
LayoutSetBranchModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "layoutSetBranch",Ident "getName"]),I (Ident "compareTo")]}
LayoutSetBranchCreateDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "layoutSetBranch1",Ident "getCreateDate"]),N (Name [Ident "layoutSetBranch2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
LayoutRevisionModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getModifiedDate"]),N (Name [Ident "layoutRevision",Ident "getModifiedDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
LayoutRevisionIdComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "layoutRevision1",Ident "getLayoutRevisionId"]),N (Name [Ident "layoutRevision2",Ident "getLayoutRevisionId"]),N (Name [Ident "layoutRevision1",Ident "getLayoutRevisionId"]),N (Name [Ident "layoutRevision2",Ident "getLayoutRevisionId"])]}
LayoutRevisionCreateDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "layoutRevision1",Ident "getCreateDate"]),N (Name [Ident "layoutRevision2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
LayoutPrototypeModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "layoutPrototype",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
LayoutPriorityComparator.java: Statistics {nl = 23, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "layout1",Ident "getPriority"]),N (Name [Ident "layout2",Ident "getPriority"]),N (Name [Ident "_layout",Ident "equals"]),N (Name [Ident "_layout",Ident "equals"])]}
LayoutModelImpl.java: Statistics {nl = 16, conditionals = 6, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getParentLayoutId"]),N (Name [Ident "layout",Ident "getParentLayoutId"]),N (Name [Ident "getParentLayoutId"]),N (Name [Ident "layout",Ident "getParentLayoutId"]),N (Name [Ident "getPriority"]),N (Name [Ident "layout",Ident "getPriority"]),N (Name [Ident "getPriority"]),N (Name [Ident "layout",Ident "getPriority"])]}
LayoutFriendlyURLModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "layoutFriendlyURL",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
LayoutComparator.java: Statistics {nl = 13, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "groupId1",Ident "compareTo"]),N (Name [Ident "layoutId1",Ident "compareTo"])]}
LayoutBranchModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "layoutBranch",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
KillOptions.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_wait_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_wait_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_wait_secs"])]}
KeyValuePairComparator.java: Statistics {nl = 11, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "kvp1",Ident "getKey"]),N (Name [Ident "kvp2",Ident "getKey"]),N (Name [Ident "key1",Ident "compareTo"]),N (Name [Ident "key1",Ident "compareTo"]),N (Name [Ident "kvp1",Ident "getValue"]),N (Name [Ident "kvp2",Ident "getValue"]),N (Name [Ident "value1",Ident "compareTo"]),N (Name [Ident "value1",Ident "compareTo"])]}
KeyboardLayout.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "Integer",Ident "compare"]),N (Name [Ident "mLabel",Ident "compareToIgnoreCase"]),N (Name [Ident "mCollection",Ident "compareToIgnoreCase"])]}
JournalFolderModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getParentFolderId"]),N (Name [Ident "journalFolder",Ident "getParentFolderId"]),N (Name [Ident "getParentFolderId"]),N (Name [Ident "journalFolder",Ident "getParentFolderId"]),N (Name [Ident "getName"]),N (Name [Ident "journalFolder",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
JournalFeedModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getFeedId"]),N (Name [Ident "journalFeed",Ident "getFeedId"]),I (Ident "compareTo")]}
JournalContentSearchModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "journalContentSearch",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
JournalArticleResourceModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "journalArticleResource",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
JournalArticleModelImpl.java: Statistics {nl = 13, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getArticleId"]),N (Name [Ident "journalArticle",Ident "getArticleId"]),I (Ident "compareTo"),N (Name [Ident "getVersion"]),N (Name [Ident "journalArticle",Ident "getVersion"]),N (Name [Ident "getVersion"]),N (Name [Ident "journalArticle",Ident "getVersion"])]}
JournalArticleImageModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "journalArticleImage",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
JavaTermComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "doCompare"])]}
JavaObjectArg.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"])]}
JavaObject.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_full_class_name"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_full_class_name"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_full_class_name"]),N (Name [Ident "is_set_args_list"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_args_list"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_args_list"])]}
ItemSKUComparator.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "categoryId1",Ident "compareTo"]),N (Name [Ident "item1",Ident "getSku"]),N (Name [Ident "item2",Ident "getSku"]),N (Name [Ident "sku1",Ident "compareTo"])]}
ItemPriceComparator.java: Statistics {nl = 17, conditionals = 5, loops = 0, iterators = 0, fncalls = [N (Name [Ident "categoryId1",Ident "compareTo"]),N (Name [Ident "item1",Ident "getDiscount"]),N (Name [Ident "item1",Ident "getPrice"]),N (Name [Ident "item2",Ident "getDiscount"]),N (Name [Ident "item2",Ident "getPrice"]),N (Name [Ident "item1",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "item2",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "name1",Ident "compareTo"])]}
ItemNameComparator.java: Statistics {nl = 14, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "item1",Ident "getCategoryId"]),N (Name [Ident "item2",Ident "getCategoryId"]),N (Name [Ident "categoryId1",Ident "compareTo"]),N (Name [Ident "item1",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "item2",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "name1",Ident "compareTo"]),N (Name [Ident "item1",Ident "getItemId"]),N (Name [Ident "item2",Ident "getItemId"]),N (Name [Ident "itemId1",Ident "compareTo"])]}
ItemMinQuantityComparator.java: Statistics {nl = 15, conditionals = 5, loops = 0, iterators = 0, fncalls = [N (Name [Ident "categoryId1",Ident "compareTo"]),N (Name [Ident "item1",Ident "getMinQuantity"]),N (Name [Ident "item2",Ident "getMinQuantity"]),N (Name [Ident "item1",Ident "getMinQuantity"]),N (Name [Ident "item2",Ident "getMinQuantity"]),N (Name [Ident "item1",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "item2",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "name1",Ident "compareTo"])]}
InvertibleComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [I (Ident "compare")]}
InvalidTopologyException.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_msg"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_msg"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_msg"])]}
InternalAttribute.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareTo"])]}
IntegerWrapper.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getValue"]),N (Name [Ident "integerWrapper",Ident "getValue"]),N (Name [Ident "getValue"]),N (Name [Ident "integerWrapper",Ident "getValue"])]}
InstanceComparator.java: Statistics {nl = 3, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getOrder"]),N (Name [Ident "getOrder"])]}
Injection.java: Statistics {nl = 15, conditionals = 6, loops = 0, iterators = 0, fncalls = [N (Name [Ident "o1",Ident "getModifiers"]),N (Name [Ident "o2",Ident "getModifiers"]),N (Name [Ident "Modifier",Ident "isPublic"]),N (Name [Ident "Modifier",Ident "isPublic"]),N (Name [Ident "Modifier",Ident "isProtected"]),N (Name [Ident "Modifier",Ident "isProtected"]),N (Name [Ident "Modifier",Ident "isPrivate"]),N (Name [Ident "Modifier",Ident "isPrivate"])]}
Injection.java: Statistics {nl = 15, conditionals = 6, loops = 0, iterators = 0, fncalls = [N (Name [Ident "o1",Ident "getModifiers"]),N (Name [Ident "o2",Ident "getModifiers"]),N (Name [Ident "Modifier",Ident "isPublic"]),N (Name [Ident "Modifier",Ident "isPublic"]),N (Name [Ident "Modifier",Ident "isProtected"]),N (Name [Ident "Modifier",Ident "isProtected"]),N (Name [Ident "Modifier",Ident "isPrivate"]),N (Name [Ident "Modifier",Ident "isPrivate"])]}
ImportPackage.java: Statistics {nl = 5, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "importPackage",Ident "isStatic"]),N (Name [Ident "importPackage",Ident "getImportString"]),N (Name [Ident "_importString",Ident "compareTo"])]}
ImageModelImpl.java: Statistics {nl = 9, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getImageId"]),N (Name [Ident "image",Ident "getImageId"]),N (Name [Ident "getImageId"]),N (Name [Ident "image",Ident "getImageId"])]}
HttpVersion.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "protocolName"]),N (Name [Ident "o",Ident "protocolName"]),I (Ident "compareTo"),N (Name [Ident "majorVersion"]),N (Name [Ident "o",Ident "majorVersion"]),N (Name [Ident "minorVersion"]),N (Name [Ident "o",Ident "minorVersion"])]}
HelpTopicComparator.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "lhs",Ident "startsWith"]),N (Name [Ident "rhs",Ident "startsWith"]),N (Name [Ident "lhs",Ident "compareToIgnoreCase"])]}
HeadingNode.java: Statistics {nl = 5, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "headingNode",Ident "getLevel"]),N (Name [Ident "headingNode",Ident "getLevel"])]}
GroupTypeComparator.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "group1",Ident "getType"]),N (Name [Ident "group2",Ident "getType"]),N (Name [Ident "group1",Ident "getType"]),N (Name [Ident "group2",Ident "getType"]),N (Name [Ident "group1",Ident "getName"]),N (Name [Ident "group2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
GroupNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "group1",Ident "getName"]),N (Name [Ident "group2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"])]}
GroupModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "group",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
Grouping.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"])]}
GroupIdComparator.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "group1",Ident "getGroupId"]),N (Name [Ident "group2",Ident "getGroupId"])]}
GroupFriendlyURLComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "group1",Ident "getFriendlyURL"]),N (Name [Ident "group2",Ident "getFriendlyURL"]),N (Name [Ident "friendlyURL1",Ident "compareTo"])]}
GlobalStreamId.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_componentId"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_componentId"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_componentId"]),N (Name [Ident "is_set_streamId"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_streamId"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_streamId"])]}
GlobalSortKeyComparator.java: Statistics {nl = 5, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "left",Ident "getGlobalSortKey"]),N (Name [Ident "right",Ident "getGlobalSortKey"]),N (Name [Ident "left",Ident "getGlobalSortKey"]),N (Name [Ident "right",Ident "getGlobalSortKey"]),I (Ident "compareTo")]}
GetInfoOptions.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_num_err_choice"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_num_err_choice"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_num_err_choice"])]}
Functions.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "Double",Ident "compare"]),I (Ident "compareTo")]}
Functions.java: Statistics {nl = 6, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "map",Ident "get"]),N (Name [Ident "map",Ident "get"]),N (Name [Ident "tga",Ident "compareToIgnoreCase"])]}
Functions.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "a",Ident "getThreadId"]),N (Name [Ident "b",Ident "getThreadId"]),N (Name [Ident "compare"]),N (Name [Ident "a",Ident "getThreadName"]),N (Name [Ident "b",Ident "getThreadName"]),I (Ident "compareToIgnoreCase")]}
Functions.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "a",Ident "getId"]),N (Name [Ident "b",Ident "getId"]),N (Name [Ident "compare"]),N (Name [Ident "a",Ident "getName"]),N (Name [Ident "b",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
FolderInfoHolder.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "s1",Ident "compareToIgnoreCase"]),N (Name [Ident "s1",Ident "compareTo"])]}
FolderIdComparator.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "folder1",Ident "getFolderId"]),N (Name [Ident "folder2",Ident "getFolderId"])]}
FocusFinder.java: Statistics {nl = 21, conditionals = 13, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getRect"]),N (Name [Ident "getRect"])]}
FloatWrapper.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getValue"]),N (Name [Ident "floatWrapper",Ident "getValue"]),N (Name [Ident "getValue"]),N (Name [Ident "floatWrapper",Ident "getValue"])]}
FloatAttribute.java: Statistics {nl = 4, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "MathUtils",Ident "isEqual"])]}
FlashMap.java: Statistics {nl = 5, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "other",Ident "targetRequestParams",Ident "size"]),I (Ident "size")]}
FileVersionVersionComparator.java: Statistics {nl = 26, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "dlFileVersion1",Ident "getVersion"]),N (Name [Ident "version1",Ident "equals"]),N (Name [Ident "dlFileVersion2",Ident "getVersion"]),N (Name [Ident "version2",Ident "equals"]),N (Name [Ident "StringUtil",Ident "split"]),N (Name [Ident "StringUtil",Ident "split"])]}
FileRankCreateDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "dlFileRank1",Ident "getCreateDate"]),N (Name [Ident "dlFileRank2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
FilePathFilterAggregator.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [I (Ident "getClass"),I (Ident "getName"),N (Name [Ident "that",Ident "filter",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo")]}
FileLruCache.java: Statistics {nl = 5, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getFile"]),N (Name [Ident "another",Ident "getFile"]),I (Ident "compareTo"),N (Name [Ident "getModified"]),N (Name [Ident "another",Ident "getModified"]),N (Name [Ident "getModified"]),N (Name [Ident "another",Ident "getModified"])]}
ExtensionComponent.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [I (Ident "ordinal"),N (Name [Ident "that",Ident "ordinal"]),I (Ident "getDisplayName"),N (Name [Ident "Util",Ident "fixNull"]),I (Ident "getDisplayName"),N (Name [Ident "Util",Ident "fixNull"]),I (Ident "compareTo"),I (Ident "getClass"),I (Ident "getName"),N (Name [Ident "that",Ident "instance",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo")]}
ExportImportConfigurationModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "exportImportConfiguration",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
ExpandoValueModelImpl.java: Statistics {nl = 23, conditionals = 9, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getTableId"]),N (Name [Ident "expandoValue",Ident "getTableId"]),N (Name [Ident "getTableId"]),N (Name [Ident "expandoValue",Ident "getTableId"]),N (Name [Ident "getRowId"]),N (Name [Ident "expandoValue",Ident "getRowId"]),N (Name [Ident "getRowId"]),N (Name [Ident "expandoValue",Ident "getRowId"]),N (Name [Ident "getColumnId"]),N (Name [Ident "expandoValue",Ident "getColumnId"]),N (Name [Ident "getColumnId"]),N (Name [Ident "expandoValue",Ident "getColumnId"])]}
ExpandoTableModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "expandoTable",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ExpandoRowModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "expandoRow",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ExpandoColumnModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "expandoColumn",Ident "getName"]),I (Ident "compareTo")]}
ExecutorSummary.java: Statistics {nl = 46, conditionals = 19, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_executor_info"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_executor_info"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_executor_info"]),N (Name [Ident "is_set_component_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_component_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_component_id"]),N (Name [Ident "is_set_host"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_host"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_host"]),N (Name [Ident "is_set_port"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_port"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_port"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_uptime_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "is_set_stats"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_stats"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_stats"])]}
ExecutorStats.java: Statistics {nl = 32, conditionals = 13, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_emitted"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_emitted"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_emitted"]),N (Name [Ident "is_set_transferred"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_transferred"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_transferred"]),N (Name [Ident "is_set_specific"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_specific"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_specific"]),N (Name [Ident "is_set_rate"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_rate"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_rate"])]}
ExecutorSpecificStats.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"])]}
ExecutorInfo.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_task_start"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_task_start"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_task_start"]),N (Name [Ident "is_set_task_end"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_task_end"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_task_end"])]}
EventTimeComparator.java: Statistics {nl = 20, conditionals = 5, loops = 0, iterators = 0, fncalls = [N (Name [Ident "CalUtil",Ident "isAllDay"]),N (Name [Ident "CalUtil",Ident "isAllDay"]),N (Name [Ident "compareTitle"]),N (Name [Ident "event1",Ident "isRepeating"]),N (Name [Ident "event2",Ident "isRepeating"]),N (Name [Ident "getStartDate"]),N (Name [Ident "getStartDate"]),N (Name [Ident "startDate1",Ident "compareTo"]),N (Name [Ident "getDuration"]),N (Name [Ident "getDuration"]),N (Name [Ident "duration1",Ident "compareTo"]),N (Name [Ident "compareTitle"])]}
ErrorInfo.java: Statistics {nl = 32, conditionals = 13, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_error"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_error"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_error"]),N (Name [Ident "is_set_error_time_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_error_time_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_error_time_secs"]),N (Name [Ident "is_set_host"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_host"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_host"]),N (Name [Ident "is_set_port"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_port"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_port"])]}
EntryVisitsComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "entry1",Ident "getVisits"]),N (Name [Ident "entry2",Ident "getVisits"]),N (Name [Ident "entry1",Ident "getVisits"]),N (Name [Ident "entry2",Ident "getVisits"])]}
EntryUserNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "entry1",Ident "getUserName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "entry2",Ident "getUserName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "name1",Ident "compareTo"])]}
EntryURLComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "entry1",Ident "getUrl"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "entry2",Ident "getUrl"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "url1",Ident "compareTo"])]}
EntryTypeComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "entry1",Ident "getClassNameId"]),N (Name [Ident "entry2",Ident "getClassNameId"]),N (Name [Ident "entry1",Ident "getClassNameId"]),N (Name [Ident "entry2",Ident "getClassNameId"])]}
EntryPriorityComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "entry1",Ident "getPriority"]),N (Name [Ident "entry2",Ident "getPriority"]),N (Name [Ident "entry1",Ident "getPriority"]),N (Name [Ident "entry2",Ident "getPriority"])]}
EntryNameComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "entry1",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "entry2",Ident "getName"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "name1",Ident "compareTo"])]}
EntryDisplayDateComparator.java: Statistics {nl = 9, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "entry1",Ident "getDisplayDate"]),N (Name [Ident "entry2",Ident "getDisplayDate"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "entry1",Ident "getEntryId"]),N (Name [Ident "entry2",Ident "getEntryId"]),N (Name [Ident "entry1",Ident "getEntryId"]),N (Name [Ident "entry2",Ident "getEntryId"])]}
EntryCreateDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "entry1",Ident "getCreateDate"]),N (Name [Ident "entry2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
EmptyByteBuf.java: Statistics {nl = 1, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "buffer",Ident "isReadable"])]}
EmbeddedChannelId.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "asLongText"]),N (Name [Ident "o",Ident "asLongText"]),I (Ident "compareTo")]}
EmailAddressModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "emailAddress",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
ElectMasterService.java: Statistics {nl = 5, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "o1",Ident "masterNode"]),N (Name [Ident "o2",Ident "masterNode"]),N (Name [Ident "o1",Ident "masterNode"]),N (Name [Ident "o2",Ident "masterNode"]),N (Name [Ident "o1",Ident "id"]),N (Name [Ident "o2",Ident "id"]),I (Ident "compareTo")]}
Editor.java: Statistics {nl = 16, conditionals = 5, loops = 0, iterators = 0, fncalls = [N (Name [Ident "span1",Ident "getFlags"]),N (Name [Ident "span2",Ident "getFlags"]),N (Name [Ident "mSpansLengths",Ident "get"]),I (Ident "intValue"),N (Name [Ident "mSpansLengths",Ident "get"]),I (Ident "intValue")]}
Duration.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "Long",Ident "compare"]),N (Name [Ident "toNanoseconds"]),N (Name [Ident "other",Ident "toNanoseconds"]),N (Name [Ident "Long",Ident "compare"])]}
DTBuilder.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "dv",Ident "year"]),N (Name [Ident "dv",Ident "month"]),N (Name [Ident "dv",Ident "day"]),N (Name [Ident "tv",Ident "hour"]),N (Name [Ident "tv",Ident "minute"]),N (Name [Ident "tv",Ident "second"])]}
DRPCRequest.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_func_args"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_func_args"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_func_args"]),N (Name [Ident "is_set_request_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_request_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_request_id"])]}
DRPCExecutionException.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_msg"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_msg"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_msg"])]}
DropBoxManagerService.java: Statistics {nl = 9, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "hashCode"]),N (Name [Ident "o",Ident "hashCode"]),N (Name [Ident "hashCode"]),N (Name [Ident "o",Ident "hashCode"])]}
DropBoxManagerService.java: Statistics {nl = 17, conditionals = 8, loops = 0, iterators = 0, fncalls = [N (Name [Ident "file",Ident "compareTo"]),N (Name [Ident "hashCode"]),N (Name [Ident "o",Ident "hashCode"]),N (Name [Ident "hashCode"]),N (Name [Ident "o",Ident "hashCode"])]}
DoubleWrapper.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getValue"]),N (Name [Ident "doubleWrapper",Ident "getValue"]),N (Name [Ident "getValue"]),N (Name [Ident "doubleWrapper",Ident "getValue"])]}
DLSyncEventModelImpl.java: Statistics {nl = 9, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getModifiedTime"]),N (Name [Ident "dlSyncEvent",Ident "getModifiedTime"]),N (Name [Ident "getModifiedTime"]),N (Name [Ident "dlSyncEvent",Ident "getModifiedTime"])]}
DLFolderModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getParentFolderId"]),N (Name [Ident "dlFolder",Ident "getParentFolderId"]),N (Name [Ident "getParentFolderId"]),N (Name [Ident "dlFolder",Ident "getParentFolderId"]),N (Name [Ident "getName"]),N (Name [Ident "dlFolder",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
DLFileVersionModelImpl.java: Statistics {nl = 14, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getFileEntryId"]),N (Name [Ident "dlFileVersion",Ident "getFileEntryId"]),N (Name [Ident "getFileEntryId"]),N (Name [Ident "dlFileVersion",Ident "getFileEntryId"]),N (Name [Ident "getCreateDate"]),N (Name [Ident "dlFileVersion",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
DLFileShortcutModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "dlFileShortcut",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DLFileRankModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "dlFileRank",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
DLFileEntryTypeModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "dlFileEntryType",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DLFileEntryModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getFolderId"]),N (Name [Ident "dlFileEntry",Ident "getFolderId"]),N (Name [Ident "getFolderId"]),N (Name [Ident "dlFileEntry",Ident "getFolderId"]),N (Name [Ident "getName"]),N (Name [Ident "dlFileEntry",Ident "getName"]),I (Ident "compareTo")]}
DLFileEntryMetadataModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "dlFileEntryMetadata",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DLContentVersionComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "content1",Ident "getVersion"]),N (Name [Ident "content2",Ident "getVersion"]),N (Name [Ident "version1",Ident "compareTo"])]}
DLContentModelImpl.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getVersion"]),N (Name [Ident "dlContent",Ident "getVersion"]),I (Ident "compareTo")]}
DistributedRPCInvocations.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"]),N (Name [Ident "is_set_result"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_result"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_result"])]}
DistributedRPCInvocations.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
DistributedRPCInvocations.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_functionName"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_functionName"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_functionName"])]}
DistributedRPCInvocations.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
DistributedRPCInvocations.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_id"])]}
DistributedRPCInvocations.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
DistributedRPC.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_functionName"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_functionName"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_functionName"]),N (Name [Ident "is_set_funcArgs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_funcArgs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_funcArgs"])]}
DistributedRPC.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_success"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_success"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_success"]),N (Name [Ident "is_set_e"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_e"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_e"]),N (Name [Ident "is_set_aze"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_aze"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_aze"])]}
DiskFileUpload.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareTo"])]}
DiskFileUpload.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "o",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
DiskAttribute.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareTo"])]}
DirectoryBrowserSupport.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "dirRank"]),N (Name [Ident "dirRank"]),N (Name [Ident "lhs",Ident "getName"]),N (Name [Ident "rhs",Ident "getName"]),I (Ident "compare")]}
DepthTestAttribute.java: Statistics {nl = 12, conditionals = 8, loops = 0, iterators = 0, fncalls = [N (Name [Ident "MathUtils",Ident "isEqual"]),N (Name [Ident "MathUtils",Ident "isEqual"])]}
DefaultRenderableSorter.java: Statistics {nl = 9, conditionals = 5, loops = 0, iterators = 0, fncalls = [N (Name [Ident "o1",Ident "material",Ident "has"]),N (Name [Ident "o1",Ident "material",Ident "get"]),N (Name [Ident "o2",Ident "material",Ident "has"]),N (Name [Ident "o2",Ident "material",Ident "get"]),N (Name [Ident "o1",Ident "worldTransform",Ident "getTranslation"]),N (Name [Ident "o2",Ident "worldTransform",Ident "getTranslation"]),N (Name [Ident "camera",Ident "position",Ident "dst2"]),N (Name [Ident "camera",Ident "position",Ident "dst2"])]}
DefaultLifecycleProcessor.java: Statistics {nl = 3, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getPhase"]),N (Name [Ident "getPhase"])]}
DefaultCookie.java: Statistics {nl = 20, conditionals = 8, loops = 0, iterators = 0, fncalls = [N (Name [Ident "name"]),N (Name [Ident "c",Ident "name"]),I (Ident "compareToIgnoreCase"),N (Name [Ident "c",Ident "path"]),N (Name [Ident "path"]),N (Name [Ident "c",Ident "path"]),I (Ident "compareTo"),N (Name [Ident "c",Ident "path"]),N (Name [Ident "path"]),N (Name [Ident "c",Ident "domain"]),N (Name [Ident "domain"]),N (Name [Ident "c",Ident "domain"]),I (Ident "compareToIgnoreCase"),N (Name [Ident "c",Ident "domain"]),N (Name [Ident "domain"])]}
DefaultChannelGroup.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "name"]),N (Name [Ident "o",Ident "name"]),I (Ident "compareTo"),N (Name [Ident "System",Ident "identityHashCode"]),N (Name [Ident "System",Ident "identityHashCode"])]}
DefaultAnnotationHandlerMapping.java: Statistics {nl = 1, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareParams"])]}
DefaultAnnotationHandlerMapping.java: Statistics {nl = 1, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareParams"])]}
DefaultAnnotationHandlerMapping.java: Statistics {nl = 12, conditionals = 5, loops = 0, iterators = 0, fncalls = [I (Ident "equals"),I (Ident "equals"),N (Name [Ident "compareParams"]),I (Ident "getClass"),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo")]}
DefaultAnnotationHandlerMapping.java: Statistics {nl = 12, conditionals = 5, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareParams"]),I (Ident "getClass"),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo")]}
DefaultAnnotationHandlerMapping.java: Statistics {nl = 8, conditionals = 4, loops = 0, iterators = 0, fncalls = [I (Ident "equals"),I (Ident "equals"),I (Ident "getClass"),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo")]}
DefaultAnnotationHandlerMapping.java: Statistics {nl = 8, conditionals = 4, loops = 0, iterators = 0, fncalls = [I (Ident "equals"),I (Ident "equals"),I (Ident "getClass"),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo")]}
DDMTemplateVersionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddmTemplateVersion",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDMTemplateModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddmTemplate",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDMStructureVersionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddmStructureVersion",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDMStructureModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddmStructure",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDMStructureLinkModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddmStructureLink",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDMStructureLayoutModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddmStructureLayout",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDMStorageLinkModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddmStorageLink",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDMContentModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddmContent",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDLRecordVersionVersionComparator.java: Statistics {nl = 22, conditionals = 8, loops = 0, iterators = 0, fncalls = [N (Name [Ident "recordVersion1",Ident "getVersion"]),N (Name [Ident "recordVersion2",Ident "getVersion"]),N (Name [Ident "StringUtil",Ident "split"]),N (Name [Ident "StringUtil",Ident "split"])]}
DDLRecordVersionModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddlRecordVersion",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDLRecordSetModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddlRecordSet",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DDLRecordModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ddlRecord",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
DateValueImpl.java: Statistics {nl = 13, conditionals = 4, loops = 0, iterators = 0, fncalls = [I (Ident "day"),I (Ident "month"),I (Ident "year"),N (Name [Ident "other",Ident "day"]),N (Name [Ident "other",Ident "month"]),N (Name [Ident "other",Ident "year"]),N (Name [Ident "self",Ident "second"]),N (Name [Ident "self",Ident "minute"]),N (Name [Ident "self",Ident "hour"]),N (Name [Ident "othr",Ident "second"]),N (Name [Ident "othr",Ident "minute"]),N (Name [Ident "othr",Ident "hour"])]}
CubemapAttribute.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "textureDescription",Ident "compareTo"])]}
Credentials.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_creds"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_creds"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_creds"])]}
CountryModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "country",Ident "getName"]),I (Ident "compareTo")]}
ContactModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "contact",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ConsumesRequestCondition.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [I (Ident "get"),N (Name [Ident "other",Ident "expressions",Ident "get"]),I (Ident "compareTo"),N (Name [Ident "other",Ident "expressions",Ident "isEmpty"]),I (Ident "isEmpty"),I (Ident "isEmpty"),N (Name [Ident "other",Ident "expressions",Ident "isEmpty"])]}
Configuration.java: Statistics {nl = 65, conditionals = 22, loops = 0, iterators = 0, fncalls = [I (Ident "getLanguage"),N (Name [Ident "that",Ident "locale",Ident "getLanguage"]),I (Ident "compareTo"),I (Ident "getCountry"),N (Name [Ident "that",Ident "locale",Ident "getCountry"]),I (Ident "compareTo"),I (Ident "getVariant"),N (Name [Ident "that",Ident "locale",Ident "getVariant"]),I (Ident "compareTo")]}
ConditionRouter.java: Statistics {nl = 4, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "o",Ident "getClass"]),N (Name [Ident "url",Ident "toFullString"]),N (Name [Ident "c",Ident "url",Ident "toFullString"]),I (Ident "compareTo")]}
ComponentObject.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"])]}
ComponentName.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [I (Ident "compareTo"),I (Ident "compareTo")]}
ComponentCommon.java: Statistics {nl = 32, conditionals = 13, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_inputs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_inputs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_inputs"]),N (Name [Ident "is_set_streams"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_streams"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_streams"]),N (Name [Ident "is_set_parallelism_hint"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_parallelism_hint"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_parallelism_hint"]),N (Name [Ident "is_set_json_conf"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_json_conf"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_json_conf"])]}
CompanyModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "company",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
CompanyImpl.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getWebId"]),N (Name [Ident "company",Ident "getWebId"]),N (Name [Ident "webId1",Ident "compareTo"]),N (Name [Ident "webId2",Ident "equals"]),N (Name [Ident "webId1",Ident "equals"])]}
CommitFileComparator.java: Statistics {nl = 9, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "lhs",Ident "getFilename"]),N (Name [Ident "lPath",Ident "lastIndexOf"]),N (Name [Ident "lPath",Ident "substring"]),N (Name [Ident "rhs",Ident "getFilename"]),N (Name [Ident "rPath",Ident "lastIndexOf"]),N (Name [Ident "rPath",Ident "substring"]),N (Name [Ident "CASE_INSENSITIVE_ORDER",Ident "compare"])]}
ColorAttribute.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [I (Ident "toIntBits"),N (Name [Ident "color",Ident "toIntBits"])]}
ClusterWorkerHeartbeat.java: Statistics {nl = 32, conditionals = 13, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_storm_id"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_storm_id"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_storm_id"]),N (Name [Ident "is_set_executor_stats"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_executor_stats"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_executor_stats"]),N (Name [Ident "is_set_time_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_time_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_time_secs"]),N (Name [Ident "is_set_uptime_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_uptime_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_uptime_secs"])]}
ClusterSummary.java: Statistics {nl = 25, conditionals = 10, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_supervisors"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_supervisors"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_supervisors"]),N (Name [Ident "is_set_nimbus_uptime_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_nimbus_uptime_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_nimbus_uptime_secs"]),N (Name [Ident "is_set_topologies"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_topologies"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_topologies"])]}
ClusterGroupModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "clusterGroup",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ClassNameModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "className",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
CalEventModelImpl.java: Statistics {nl = 8, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getStartDate"]),N (Name [Ident "calEvent",Ident "getStartDate"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "getTitle"]),N (Name [Ident "calEvent",Ident "getTitle"]),I (Ident "compareToIgnoreCase")]}
CacheObject.java: Statistics {nl = 1, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ObjectUtils",Ident "compare"])]}
BrowserTrackerModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "browserTracker",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
Broker.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [I (Ident "compareTo"),I (Ident "equals")]}
BooleanWrapper.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getValue"]),N (Name [Ident "booleanWrapper",Ident "getValue"]),N (Name [Ident "getValue"]),N (Name [Ident "booleanWrapper",Ident "getValue"])]}
BookmarksFolderModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getParentFolderId"]),N (Name [Ident "bookmarksFolder",Ident "getParentFolderId"]),N (Name [Ident "getParentFolderId"]),N (Name [Ident "bookmarksFolder",Ident "getParentFolderId"]),N (Name [Ident "getName"]),N (Name [Ident "bookmarksFolder",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
BookmarksEntryModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getFolderId"]),N (Name [Ident "bookmarksEntry",Ident "getFolderId"]),N (Name [Ident "getFolderId"]),N (Name [Ident "bookmarksEntry",Ident "getFolderId"]),N (Name [Ident "getName"]),N (Name [Ident "bookmarksEntry",Ident "getName"]),I (Ident "compareToIgnoreCase")]}
BoltStats.java: Statistics {nl = 39, conditionals = 16, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_acked"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_acked"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_acked"]),N (Name [Ident "is_set_failed"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_failed"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_failed"]),N (Name [Ident "is_set_process_ms_avg"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_process_ms_avg"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_process_ms_avg"]),N (Name [Ident "is_set_executed"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_executed"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_executed"]),N (Name [Ident "is_set_execute_ms_avg"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_execute_ms_avg"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_execute_ms_avg"])]}
Bolt.java: Statistics {nl = 18, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_bolt_object"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_bolt_object"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_bolt_object"]),N (Name [Ident "is_set_common"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_common"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_common"])]}
BlogsStatsUserModelImpl.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getEntryCount"]),N (Name [Ident "blogsStatsUser",Ident "getEntryCount"]),N (Name [Ident "getEntryCount"]),N (Name [Ident "blogsStatsUser",Ident "getEntryCount"])]}
BlogsEntryModelImpl.java: Statistics {nl = 10, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getDisplayDate"]),N (Name [Ident "blogsEntry",Ident "getDisplayDate"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "getCreateDate"]),N (Name [Ident "blogsEntry",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
BlendingAttribute.java: Statistics {nl = 10, conditionals = 7, loops = 0, iterators = 0, fncalls = [N (Name [Ident "MathUtils",Ident "isEqual"])]}
BatterySipper.java: Statistics {nl = 6, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "Double",Ident "compare"])]}
BackgroundTaskModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "backgroundTask",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
BackgroundTaskCreateDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "backgroundTask1",Ident "getCreateDate"]),N (Name [Ident "backgroundTask2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
BackgroundTaskCompletionDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "backgroundTask1",Ident "getCompletionDate"]),N (Name [Ident "backgroundTask2",Ident "getCompletionDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
AuthorizationException.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_msg"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_msg"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_msg"])]}
Assignment.java: Statistics {nl = 32, conditionals = 13, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_master_code_dir"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_master_code_dir"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_master_code_dir"]),N (Name [Ident "is_set_node_host"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_node_host"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_node_host"]),N (Name [Ident "is_set_executor_node_port"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_executor_node_port"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_executor_node_port"]),N (Name [Ident "is_set_executor_start_time_secs"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_executor_start_time_secs"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_executor_start_time_secs"])]}
AssetVocabularyModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "assetVocabulary",Ident "getName"]),I (Ident "compareTo")]}
AssetTagStatsModelImpl.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getAssetCount"]),N (Name [Ident "assetTagStats",Ident "getAssetCount"]),N (Name [Ident "getAssetCount"]),N (Name [Ident "assetTagStats",Ident "getAssetCount"])]}
AssetTagNameComparator.java: Statistics {nl = 9, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "assetTag1",Ident "getName"]),N (Name [Ident "assetTag2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"]),N (Name [Ident "name1",Ident "compareToIgnoreCase"])]}
AssetTagModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "assetTag",Ident "getName"]),I (Ident "compareTo")]}
AssetTagCountComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "assetTag1",Ident "getAssetCount"]),N (Name [Ident "assetTag2",Ident "getAssetCount"]),N (Name [Ident "assetTag1",Ident "getAssetCount"]),N (Name [Ident "assetTag2",Ident "getAssetCount"])]}
AssetLinkModelImpl.java: Statistics {nl = 9, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getWeight"]),N (Name [Ident "assetLink",Ident "getWeight"]),N (Name [Ident "getWeight"]),N (Name [Ident "assetLink",Ident "getWeight"])]}
AssetEntryModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "assetEntry",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
AssetCategoryPropertyModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getKey"]),N (Name [Ident "assetCategoryProperty",Ident "getKey"]),I (Ident "compareTo")]}
AssetCategoryModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getName"]),N (Name [Ident "assetCategory",Ident "getName"]),I (Ident "compareTo")]}
AssetCategoryLeftCategoryIdComparator.java: Statistics {nl = 10, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "assetCategory1",Ident "getLeftCategoryId"]),N (Name [Ident "assetCategory2",Ident "getLeftCategoryId"])]}
AspectJPrecedenceComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [I (Ident "compare"),N (Name [Ident "comparePrecedenceWithinAspect"]),N (Name [Ident "declaredInSameAspect"])]}
ArticleVersionComparator.java: Statistics {nl = 8, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "article1",Ident "getVersion"]),N (Name [Ident "article2",Ident "getVersion"]),N (Name [Ident "article1",Ident "getVersion"]),N (Name [Ident "article2",Ident "getVersion"])]}
ArticleTitleComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "article1",Ident "getTitle"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "article2",Ident "getTitle"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "title1",Ident "compareTo"])]}
ArticleReviewDateComparator.java: Statistics {nl = 9, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "article1",Ident "getReviewDate"]),N (Name [Ident "article2",Ident "getReviewDate"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "article1",Ident "getVersion"]),N (Name [Ident "article2",Ident "getVersion"]),N (Name [Ident "article1",Ident "getVersion"]),N (Name [Ident "article2",Ident "getVersion"])]}
ArticleIDComparator.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "article1",Ident "getArticleId"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "article2",Ident "getArticleId"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "articleId1",Ident "compareTo"]),N (Name [Ident "article1",Ident "getVersion"]),N (Name [Ident "article2",Ident "getVersion"]),N (Name [Ident "article1",Ident "getVersion"]),N (Name [Ident "article2",Ident "getVersion"])]}
ArticleDisplayDateComparator.java: Statistics {nl = 9, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "article1",Ident "getDisplayDate"]),N (Name [Ident "article2",Ident "getDisplayDate"]),N (Name [Ident "DateUtil",Ident "compareTo"]),N (Name [Ident "article1",Ident "getVersion"]),N (Name [Ident "article2",Ident "getVersion"]),N (Name [Ident "article1",Ident "getVersion"]),N (Name [Ident "article2",Ident "getVersion"])]}
ArticleCreateDateComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "article1",Ident "getCreateDate"]),N (Name [Ident "article2",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
AppTitleComparator.java: Statistics {nl = 4, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "app1",Ident "getTitle"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),N (Name [Ident "app2",Ident "getTitle"]),N (Name [Ident "StringUtil",Ident "toLowerCase"]),I (Ident "compareTo")]}
AppSecurityPermissions.java: Statistics {nl = 5, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "sCollator",Ident "compare"])]}
AppModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "app",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
ApplicationInfo.java: Statistics {nl = 7, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "mPM",Ident "getApplicationLabel"]),N (Name [Ident "mPM",Ident "getApplicationLabel"]),N (Name [Ident "sa",Ident "toString"]),N (Name [Ident "sb",Ident "toString"]),N (Name [Ident "sCollator",Ident "compare"])]}
AntPathMatcher.java: Statistics {nl = 33, conditionals = 14, loops = 0, iterators = 0, fncalls = [N (Name [Ident "info2",Ident "isLeastSpecific"]),N (Name [Ident "info1",Ident "isLeastSpecific"]),N (Name [Ident "info1",Ident "isLeastSpecific"]),N (Name [Ident "info2",Ident "isLeastSpecific"]),N (Name [Ident "pattern1",Ident "equals"]),N (Name [Ident "pattern2",Ident "equals"]),N (Name [Ident "info2",Ident "isPrefixPattern"]),N (Name [Ident "info1",Ident "getDoubleWildcards"]),N (Name [Ident "info1",Ident "isPrefixPattern"]),N (Name [Ident "info2",Ident "getDoubleWildcards"]),N (Name [Ident "info1",Ident "getTotalCount"]),N (Name [Ident "info2",Ident "getTotalCount"]),N (Name [Ident "info1",Ident "getTotalCount"]),N (Name [Ident "info2",Ident "getTotalCount"]),N (Name [Ident "info2",Ident "getLength"]),N (Name [Ident "info1",Ident "getLength"]),N (Name [Ident "info1",Ident "getLength"]),N (Name [Ident "info2",Ident "getLength"]),N (Name [Ident "info2",Ident "getSingleWildcards"]),N (Name [Ident "info1",Ident "getSingleWildcards"]),N (Name [Ident "info1",Ident "getSingleWildcards"]),N (Name [Ident "info2",Ident "getSingleWildcards"]),N (Name [Ident "info2",Ident "getUriVars"]),N (Name [Ident "info1",Ident "getUriVars"]),N (Name [Ident "info1",Ident "getUriVars"]),N (Name [Ident "info2",Ident "getUriVars"])]}
AnnouncementsFlagModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getUserId"]),N (Name [Ident "announcementsFlag",Ident "getUserId"]),N (Name [Ident "getUserId"]),N (Name [Ident "announcementsFlag",Ident "getUserId"]),N (Name [Ident "getCreateDate"]),N (Name [Ident "announcementsFlag",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
AnnouncementsEntryModelImpl.java: Statistics {nl = 12, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getPriority"]),N (Name [Ident "announcementsEntry",Ident "getPriority"]),N (Name [Ident "getPriority"]),N (Name [Ident "announcementsEntry",Ident "getPriority"]),N (Name [Ident "getModifiedDate"]),N (Name [Ident "announcementsEntry",Ident "getModifiedDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
AnnouncementsDeliveryModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "announcementsDelivery",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
AnnotationMethodHandlerAdapter.java: Statistics {nl = 25, conditionals = 8, loops = 0, iterators = 0, fncalls = [N (Name [Ident "info1",Ident "bestMatchedPattern"]),N (Name [Ident "info2",Ident "bestMatchedPattern"]),N (Name [Ident "pathComparator",Ident "compare"]),N (Name [Ident "info1",Ident "getParamCount"]),N (Name [Ident "info2",Ident "getParamCount"]),N (Name [Ident "info1",Ident "getHeaderCount"]),N (Name [Ident "info2",Ident "getHeaderCount"]),N (Name [Ident "compareAcceptHeaders"]),N (Name [Ident "info1",Ident "getMethodCount"]),N (Name [Ident "info2",Ident "getMethodCount"])]}
AmazonRankings.java: Statistics {nl = 7, conditionals = 3, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getReleaseDate"]),N (Name [Ident "amazonRankings",Ident "getReleaseDate"]),I (Ident "compareTo"),N (Name [Ident "getSalesRank"]),N (Name [Ident "amazonRankings",Ident "getSalesRank"]),N (Name [Ident "getSalesRank"]),N (Name [Ident "amazonRankings",Ident "getSalesRank"])]}
AlreadyAliveException.java: Statistics {nl = 11, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),I (Ident "getName"),N (Name [Ident "other",Ident "getClass"]),I (Ident "getName"),I (Ident "compareTo"),N (Name [Ident "getClass"]),N (Name [Ident "other",Ident "getClass"]),I (Ident "equals"),N (Name [Ident "is_set_msg"]),N (Name [Ident "Boolean",Ident "valueOf"]),N (Name [Ident "other",Ident "is_set_msg"]),I (Ident "compareTo"),N (Name [Ident "org",Ident "apache",Ident "thrift",Ident "TBaseHelper",Ident "compareTo"]),N (Name [Ident "is_set_msg"])]}
AlphabetIndexer.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "word",Ident "substring"]),N (Name [Ident "word",Ident "length"]),N (Name [Ident "mCollator",Ident "compare"])]}
AddressModelImpl.java: Statistics {nl = 5, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getCreateDate"]),N (Name [Ident "address",Ident "getCreateDate"]),N (Name [Ident "DateUtil",Ident "compareTo"])]}
AccountModelImpl.java: Statistics {nl = 6, conditionals = 2, loops = 0, iterators = 0, fncalls = [N (Name [Ident "account",Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"]),N (Name [Ident "getPrimaryKey"])]}
AccountManagerServiceTest.java: Statistics {nl = 10, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "object1",Ident "type",Ident "compareTo"]),N (Name [Ident "object1",Ident "name",Ident "compareTo"])]}
AbstractConstant.java: Statistics {nl = 14, conditionals = 4, loops = 0, iterators = 0, fncalls = [N (Name [Ident "hashCode"]),N (Name [Ident "other",Ident "hashCode"]),N (Name [Ident "uniquifier"]),N (Name [Ident "other",Ident "uniquifier"])]}
AbstractConfigurator.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getUrl"]),I (Ident "getHost"),N (Name [Ident "o",Ident "getUrl"]),I (Ident "getHost"),I (Ident "compareTo")]}
AbstractChannel.java: Statistics {nl = 3, conditionals = 1, loops = 0, iterators = 0, fncalls = [N (Name [Ident "id"]),N (Name [Ident "o",Ident "id"]),I (Ident "compareTo")]}
