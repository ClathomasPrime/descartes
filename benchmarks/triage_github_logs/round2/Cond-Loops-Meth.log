VertexAttributes.java: Statistics {nl = 20, conditionals = 9, loops = 1, iterators = 0, fncalls = [N (Name [Ident "getMask"]),N (Name [Ident "o",Ident "getMask"])]}
UTF8SortedAsUnicodeComparator.java: Statistics {nl = 25, conditionals = 3, loops = 2, iterators = 0, fncalls = [N (Name [Ident "a",Ident "array"]),N (Name [Ident "a",Ident "arrayOffset"]),N (Name [Ident "b",Ident "array"]),N (Name [Ident "b",Ident "arrayOffset"]),N (Name [Ident "a",Ident "length"]),N (Name [Ident "b",Ident "length"]),N (Name [Ident "Math",Ident "min"]),N (Name [Ident "a",Ident "length"]),N (Name [Ident "b",Ident "length"]),N (Name [Ident "a",Ident "toBytes"]),N (Name [Ident "b",Ident "toBytes"]),N (Name [Ident "a",Ident "length"]),N (Name [Ident "b",Ident "length"]),N (Name [Ident "Math",Ident "min"]),N (Name [Ident "a",Ident "length"]),N (Name [Ident "b",Ident "length"]),N (Name [Ident "a",Ident "hasArray"]),N (Name [Ident "b",Ident "hasArray"])]}
ShortBuffer.java: Statistics {nl = 14, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "get"]),N (Name [Ident "otherBuffer",Ident "get"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"])]}
PropertyComparator.java: Statistics {nl = 20, conditionals = 6, loops = 0, iterators = 1, fncalls = [N (Name [Ident "PropertyUtils",Ident "getProperty"]),N (Name [Ident "PropertyUtils",Ident "getProperty"]),N (Name [Ident "property1",Ident "toString"]),N (Name [Ident "property2",Ident "toString"]),I (Ident "compareTo"),N (Name [Ident "property1",Ident "toString"]),N (Name [Ident "property2",Ident "toString"]),I (Ident "compareToIgnoreCase"),I (Ident "compareTo")]}
ProducesRequestCondition.java: Statistics {nl = 14, conditionals = 2, loops = 0, iterators = 1, fncalls = [N (Name [Ident "getAcceptedMediaTypes"]),I (Ident "indexOfEqualMediaType"),N (Name [Ident "other",Ident "indexOfEqualMediaType"]),N (Name [Ident "compareMatchingMediaTypes"]),I (Ident "indexOfIncludedMediaType"),N (Name [Ident "other",Ident "indexOfIncludedMediaType"]),N (Name [Ident "compareMatchingMediaTypes"])]}
PatternsRequestCondition.java: Statistics {nl = 13, conditionals = 3, loops = 1, iterators = 0, fncalls = [I (Ident "getLookupPathForRequest"),I (Ident "getPatternComparator"),I (Ident "iterator"),N (Name [Ident "other",Ident "patterns",Ident "iterator"]),N (Name [Ident "iterator",Ident "next"]),N (Name [Ident "iteratorOther",Ident "next"]),N (Name [Ident "patternComparator",Ident "compare"]),N (Name [Ident "iterator",Ident "hasNext"]),N (Name [Ident "iteratorOther",Ident "hasNext"]),N (Name [Ident "iteratorOther",Ident "hasNext"]),N (Name [Ident "iterator",Ident "hasNext"])]}
NaturalOrderStringComparator.java: Statistics {nl = 53, conditionals = 13, loops = 1, iterators = 0, fncalls = [N (Name [Ident "s1",Ident "length"]),N (Name [Ident "s2",Ident "length"]),N (Name [Ident "s1",Ident "charAt"]),N (Name [Ident "s2",Ident "charAt"]),N (Name [Ident "s1",Ident "substring"]),N (Name [Ident "StringUtil",Ident "extractLeadingDigits"]),N (Name [Ident "s2",Ident "substring"]),N (Name [Ident "StringUtil",Ident "extractLeadingDigits"]),N (Name [Ident "GetterUtil",Ident "getInteger"]),N (Name [Ident "GetterUtil",Ident "getInteger"]),N (Name [Ident "leadingDigitsAsString1",Ident "length"]),N (Name [Ident "leadingDigitsAsString2",Ident "length"]),N (Name [Ident "Validator",Ident "isDigit"]),N (Name [Ident "Validator",Ident "isDigit"]),N (Name [Ident "_isDigitOrLetter"]),N (Name [Ident "_isDigitOrLetter"]),N (Name [Ident "isCheckSpecialCharacters"]),N (Name [Ident "Validator",Ident "isAscii"]),N (Name [Ident "Validator",Ident "isAscii"]),N (Name [Ident "Character",Ident "toUpperCase"]),N (Name [Ident "Character",Ident "toUpperCase"])]}
MimeType.java: Statistics {nl = 29, conditionals = 6, loops = 1, iterators = 0, fncalls = [N (Name [Ident "getType"]),N (Name [Ident "other",Ident "getType"]),I (Ident "compareToIgnoreCase"),N (Name [Ident "getSubtype"]),N (Name [Ident "other",Ident "getSubtype"]),I (Ident "compareToIgnoreCase"),N (Name [Ident "getParameters"]),I (Ident "size"),N (Name [Ident "other",Ident "getParameters"]),I (Ident "size"),N (Name [Ident "getParameters"]),I (Ident "keySet"),N (Name [Ident "thisAttributes",Ident "addAll"]),N (Name [Ident "other",Ident "getParameters"]),I (Ident "keySet"),N (Name [Ident "otherAttributes",Ident "addAll"]),N (Name [Ident "thisAttributes",Ident "iterator"]),N (Name [Ident "otherAttributes",Ident "iterator"]),N (Name [Ident "thisAttributesIterator",Ident "next"]),N (Name [Ident "otherAttributesIterator",Ident "next"]),N (Name [Ident "thisAttribute",Ident "compareToIgnoreCase"]),N (Name [Ident "getParameters"]),I (Ident "get"),N (Name [Ident "other",Ident "getParameters"]),I (Ident "get"),N (Name [Ident "thisValue",Ident "compareTo"]),N (Name [Ident "thisAttributesIterator",Ident "hasNext"])]}
MethodComparator.java: Statistics {nl = 20, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "method1",Ident "getName"]),N (Name [Ident "method2",Ident "getName"]),N (Name [Ident "name1",Ident "compareTo"]),N (Name [Ident "method1",Ident "getParameterTypes"]),N (Name [Ident "method2",Ident "getParameterTypes"]),N (Name [Ident "parameterType1",Ident "getName"]),N (Name [Ident "parameterType2",Ident "getName"]),N (Name [Ident "parameterTypeName1",Ident "compareTo"])]}
MessageListFragment.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 1, fncalls = [N (Name [Ident "comparator",Ident "compare"])]}
LongBuffer.java: Statistics {nl = 14, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "get"]),N (Name [Ident "otherBuffer",Ident "get"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"])]}
LegacyCell.java: Statistics {nl = 8, conditionals = 1, loops = 1, iterators = 0, fncalls = [N (Name [Ident "Math",Ident "min"])]}
IntBuffer.java: Statistics {nl = 14, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "get"]),N (Name [Ident "otherBuffer",Ident "get"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"])]}
FloatBuffer.java: Statistics {nl = 14, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "get"]),N (Name [Ident "otherBuffer",Ident "get"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"])]}
ExtendedBeanInfo.java: Statistics {nl = 9, conditionals = 2, loops = 1, iterators = 0, fncalls = [N (Name [Ident "desc1",Ident "getName"]),N (Name [Ident "desc2",Ident "getName"]),N (Name [Ident "right",Ident "length"]),N (Name [Ident "left",Ident "length"]),N (Name [Ident "left",Ident "length"]),N (Name [Ident "right",Ident "length"])]}
ElementComparator.java: Statistics {nl = 29, conditionals = 8, loops = 0, iterators = 2, fncalls = [N (Name [Ident "el1",Ident "getName"]),N (Name [Ident "el2",Ident "getName"]),N (Name [Ident "el1Name",Ident "compareTo"]),N (Name [Ident "el1Name",Ident "equals"]),N (Name [Ident "el1",Ident "getTextTrim"]),N (Name [Ident "el2",Ident "getTextTrim"]),N (Name [Ident "el1Text",Ident "compareTo"]),N (Name [Ident "el1Text",Ident "equals"]),N (Name [Ident "el1",Ident "attributes"]),N (Name [Ident "el2",Ident "attributes"]),N (Name [Ident "el1Attributes",Ident "size"]),N (Name [Ident "el2Attributes",Ident "size"]),N (Name [Ident "el1Attributes",Ident "size"]),N (Name [Ident "el2Attributes",Ident "size"]),N (Name [Ident "_compare"]),N (Name [Ident "el1",Ident "elements"]),N (Name [Ident "el2",Ident "elements"]),N (Name [Ident "el1Elements",Ident "size"]),N (Name [Ident "el2Elements",Ident "size"]),N (Name [Ident "el1Elements",Ident "size"]),N (Name [Ident "el2Elements",Ident "size"]),N (Name [Ident "_compare"])]}
DoubleBuffer.java: Statistics {nl = 14, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "get"]),N (Name [Ident "otherBuffer",Ident "get"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"])]}
DestinationPatternsMessageCondition.java: Statistics {nl = 13, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "message",Ident "getHeaders"]),I (Ident "get"),I (Ident "getPatternComparator"),N (Name [Ident "patterns",Ident "iterator"]),N (Name [Ident "other",Ident "patterns",Ident "iterator"]),N (Name [Ident "iterator",Ident "next"]),N (Name [Ident "iteratorOther",Ident "next"]),N (Name [Ident "patternComparator",Ident "compare"]),N (Name [Ident "iterator",Ident "hasNext"]),N (Name [Ident "iteratorOther",Ident "hasNext"]),N (Name [Ident "iteratorOther",Ident "hasNext"]),N (Name [Ident "iterator",Ident "hasNext"])]}
Correction.java: Statistics {nl = 8, conditionals = 2, loops = 1, iterators = 0, fncalls = [N (Name [Ident "Math",Ident "min"]),I (Ident "compareTo"),N (Name [Ident "Double",Ident "compare"])]}
CompoundComparator.java: Statistics {nl = 6, conditionals = 1, loops = 0, iterators = 1, fncalls = [I (Ident "size"),N (Name [Ident "Assert",Ident "state"]),N (Name [Ident "comparator",Ident "compare"])]}
CompositeRequestCondition.java: Statistics {nl = 12, conditionals = 4, loops = 1, iterators = 0, fncalls = [N (Name [Ident "assertNumberOfConditions"]),I (Ident "compareTo"),N (Name [Ident "getLength"]),N (Name [Ident "other",Ident "isEmpty"]),N (Name [Ident "isEmpty"]),N (Name [Ident "isEmpty"]),N (Name [Ident "other",Ident "isEmpty"])]}
ColumnsComparator.java: Statistics {nl = 24, conditionals = 7, loops = 2, iterators = 0, fncalls = [I (Ident "equals"),I (Ident "equals")]}
CharBuffer.java: Statistics {nl = 14, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "get"]),N (Name [Ident "otherBuffer",Ident "get"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"])]}
ChannelBuffers.java: Statistics {nl = 15, conditionals = 2, loops = 1, iterators = 0, fncalls = [N (Name [Ident "bufferA",Ident "readableBytes"]),N (Name [Ident "bufferB",Ident "readableBytes"]),N (Name [Ident "Math",Ident "min"]),N (Name [Ident "bufferA",Ident "readerIndex"]),N (Name [Ident "bufferB",Ident "readerIndex"]),N (Name [Ident "bufferA",Ident "getByte"]),N (Name [Ident "bufferB",Ident "getByte"])]}
CaseIgnoringComparator.java: Statistics {nl = 15, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "o1",Ident "length"]),N (Name [Ident "o2",Ident "length"]),N (Name [Ident "Math",Ident "min"]),N (Name [Ident "o1",Ident "charAt"]),N (Name [Ident "o2",Ident "charAt"]),N (Name [Ident "Character",Ident "toUpperCase"]),N (Name [Ident "Character",Ident "toUpperCase"]),N (Name [Ident "Character",Ident "toLowerCase"]),N (Name [Ident "Character",Ident "toLowerCase"])]}
ByteBufUtil.java: Statistics {nl = 36, conditionals = 7, loops = 3, iterators = 0, fncalls = [N (Name [Ident "bufferA",Ident "readableBytes"]),N (Name [Ident "bufferB",Ident "readableBytes"]),N (Name [Ident "Math",Ident "min"]),N (Name [Ident "bufferA",Ident "readerIndex"]),N (Name [Ident "bufferB",Ident "readerIndex"]),N (Name [Ident "bufferA",Ident "getUnsignedInt"]),N (Name [Ident "bufferB",Ident "getUnsignedInt"]),N (Name [Ident "bufferA",Ident "getUnsignedInt"]),N (Name [Ident "bufferB",Ident "getInt"]),N (Name [Ident "swapInt"]),N (Name [Ident "bufferA",Ident "order"]),N (Name [Ident "bufferB",Ident "order"]),N (Name [Ident "bufferA",Ident "getUnsignedByte"]),N (Name [Ident "bufferB",Ident "getUnsignedByte"])]}
ByteBuffer.java: Statistics {nl = 14, conditionals = 3, loops = 1, iterators = 0, fncalls = [N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"]),N (Name [Ident "get"]),N (Name [Ident "otherBuffer",Ident "get"]),N (Name [Ident "remaining"]),N (Name [Ident "otherBuffer",Ident "remaining"])]}
Attributes.java: Statistics {nl = 11, conditionals = 4, loops = 1, iterators = 0, fncalls = [N (Name [Ident "sort"]),N (Name [Ident "other",Ident "sort"]),N (Name [Ident "attributes",Ident "get"]),N (Name [Ident "other",Ident "attributes",Ident "get"]),I (Ident "compareTo")]}
AsciiString.java: Statistics {nl = 11, conditionals = 2, loops = 1, iterators = 0, fncalls = [N (Name [Ident "length"]),N (Name [Ident "string",Ident "length"]),N (Name [Ident "Math",Ident "min"]),N (Name [Ident "b2c"]),N (Name [Ident "string",Ident "charAt"])]}
ActivateComparator.java: Statistics {nl = 31, conditionals = 14, loops = 0, iterators = 4, fncalls = [N (Name [Ident "o1",Ident "equals"]),N (Name [Ident "o1",Ident "getClass"]),I (Ident "getAnnotation"),N (Name [Ident "o2",Ident "getClass"]),I (Ident "getAnnotation"),N (Name [Ident "ExtensionLoader",Ident "getExtensionLoader"]),N (Name [Ident "o2",Ident "getClass"]),N (Name [Ident "extensionLoader",Ident "getExtensionName"]),N (Name [Ident "before",Ident "equals"]),N (Name [Ident "a1",Ident "before"]),N (Name [Ident "after",Ident "equals"]),N (Name [Ident "a1",Ident "after"]),N (Name [Ident "a1",Ident "before"]),N (Name [Ident "a1",Ident "after"]),N (Name [Ident "o1",Ident "getClass"]),N (Name [Ident "extensionLoader",Ident "getExtensionName"]),N (Name [Ident "before",Ident "equals"]),N (Name [Ident "a2",Ident "before"]),N (Name [Ident "after",Ident "equals"]),N (Name [Ident "a2",Ident "after"]),N (Name [Ident "a2",Ident "before"]),N (Name [Ident "a2",Ident "after"]),N (Name [Ident "a1",Ident "before"]),N (Name [Ident "a1",Ident "after"]),N (Name [Ident "a2",Ident "before"]),N (Name [Ident "a2",Ident "after"]),N (Name [Ident "o1",Ident "getClass"]),I (Ident "getInterfaces"),I (Ident "isAnnotationPresent"),N (Name [Ident "a1",Ident "order"]),N (Name [Ident "a2",Ident "order"])]}
