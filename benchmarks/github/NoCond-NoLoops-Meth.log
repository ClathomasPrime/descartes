WrappedByteBuf.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "buf",Ident "equals"])]}
WorkSource.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "diff"])]}
VirtualFile.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "toURI"]),I (Ident "toURI"),I (Ident "equals")]}
TopologyActionOptions.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),I (Ident "equals")]}
StringText.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "bytes"]),I (Ident "bytes"),I (Ident "equals")]}
RequestMappingInfoTests.java: Statistics {nl = 25, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "assertEquals"]),N (Name [Ident "info1",Ident "hashCode"]),N (Name [Ident "info2",Ident "hashCode"]),N (Name [Ident "assertEquals"]),N (Name [Ident "info1",Ident "equals"]),N (Name [Ident "assertFalse"]),N (Name [Ident "info1",Ident "hashCode"]),N (Name [Ident "info2",Ident "hashCode"]),N (Name [Ident "assertNotEquals"]),N (Name [Ident "info1",Ident "equals"]),N (Name [Ident "assertFalse"]),N (Name [Ident "info1",Ident "hashCode"]),N (Name [Ident "info2",Ident "hashCode"]),N (Name [Ident "assertNotEquals"]),N (Name [Ident "info1",Ident "equals"]),N (Name [Ident "assertFalse"]),N (Name [Ident "info1",Ident "hashCode"]),N (Name [Ident "info2",Ident "hashCode"]),N (Name [Ident "assertNotEquals"]),N (Name [Ident "info1",Ident "equals"]),N (Name [Ident "assertFalse"]),N (Name [Ident "info1",Ident "hashCode"]),N (Name [Ident "info2",Ident "hashCode"]),N (Name [Ident "assertNotEquals"]),N (Name [Ident "info1",Ident "equals"]),N (Name [Ident "assertFalse"]),N (Name [Ident "info1",Ident "hashCode"]),N (Name [Ident "info2",Ident "hashCode"]),N (Name [Ident "assertNotEquals"]),N (Name [Ident "info1",Ident "equals"]),N (Name [Ident "assertFalse"]),N (Name [Ident "info1",Ident "hashCode"]),N (Name [Ident "info2",Ident "hashCode"]),N (Name [Ident "assertNotEquals"]),N (Name [Ident "info1",Ident "equals"]),N (Name [Ident "assertFalse"]),N (Name [Ident "info1",Ident "hashCode"]),N (Name [Ident "info2",Ident "hashCode"]),N (Name [Ident "assertNotEquals"])]}
PermissionGroup.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "id"]),I (Ident "id"),I (Ident "equals")]}
Permission.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getId"]),I (Ident "getId"),I (Ident "equals")]}
MixedFileUpload.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "fileUpload",Ident "equals"])]}
MixedAttribute.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "attribute",Ident "equals"])]}
JsonDataSource.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [I (Ident "equals")]}
JavaObjectArg.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),I (Ident "equals")]}
IndexedEdge.java: Statistics {nl = 2, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "source",Ident "equals"]),N (Name [Ident "target",Ident "equals"])]}
IdStrategy.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compare"])]}
IdStrategy.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getClass"]),N (Name [Ident "obj",Ident "getClass"]),I (Ident "equals")]}
IdStrategy.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "StringUtils",Ident "equals"])]}
IdStrategy.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "keyFor"]),N (Name [Ident "keyFor"]),N (Name [Ident "StringUtils",Ident "equals"])]}
Grouping.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),I (Ident "equals")]}
FolderInfoHolder.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "name",Ident "equals"])]}
FileLruCache.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "compareTo"])]}
ExtendedBeanInfo.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "PropertyDescriptorUtils",Ident "equals"])]}
ExecutorSpecificStats.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),I (Ident "equals")]}
EmptyByteBuf.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [I (Ident "isReadable")]}
EmbeddedChannelId.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [I (Ident "equals")]}
DateUtil_IW.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "DateUtil",Ident "equals"])]}
DateUtil_IW.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "DateUtil",Ident "equals"])]}
ConfigurationClassParser.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [I (Ident "getClassName"),I (Ident "getClassName"),I (Ident "equals")]}
Configuration.java: Statistics {nl = 3, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "equals"])]}
ConcurrentHashMapV8.java: Statistics {nl = 5, conditionals = 0, loops = 0, iterators = 0, fncalls = [I (Ident "getKey"),N (Name [Ident "e",Ident "getValue"]),N (Name [Ident "k",Ident "equals"]),N (Name [Ident "v",Ident "equals"])]}
ConcurrentHashMapV8.java: Statistics {nl = 4, conditionals = 0, loops = 0, iterators = 0, fncalls = [I (Ident "getKey"),N (Name [Ident "e",Ident "getValue"]),N (Name [Ident "k",Ident "equals"]),N (Name [Ident "v",Ident "equals"])]}
ConcurrentHashMapV8.java: Statistics {nl = 2, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "containsAll"]),N (Name [Ident "c",Ident "containsAll"])]}
ConcurrentHashMapV8.java: Statistics {nl = 2, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "containsAll"]),N (Name [Ident "c",Ident "containsAll"])]}
ComponentObject.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "getSetField"]),N (Name [Ident "other",Ident "getSetField"]),N (Name [Ident "getFieldValue"]),N (Name [Ident "other",Ident "getFieldValue"]),I (Ident "equals")]}
BytesText.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "bytes"]),I (Ident "bytes"),I (Ident "equals")]}
AnnotationMethodHandlerAdapter.java: Statistics {nl = 2, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "Arrays",Ident "equals"]),N (Name [Ident "Arrays",Ident "equals"]),N (Name [Ident "Arrays",Ident "equals"]),N (Name [Ident "Arrays",Ident "equals"])]}
AbstractMemoryHttpDataTest.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [I (Ident "equals")]}
AbstractConstant.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [I (Ident "equals")]}
AbstractChannelBuffer.java: Statistics {nl = 1, conditionals = 0, loops = 0, iterators = 0, fncalls = [N (Name [Ident "ChannelBuffers",Ident "equals"])]}
